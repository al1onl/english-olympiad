// üéØ –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
const CONFIG = {
    ADMIN_LOGIN: "admin",
    ADMIN_PASSWORD: "admin123", 
    ADMIN_CODE_WORD: "olympiad2024",
    TASK_TIME: 20 * 60, // 20 —Ö–≤–∏–ª–∏–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö (–∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å 60 —Ö–≤–∏–ª–∏–Ω)
    MAX_FULLSCREEN_EXITS: 7,
    MAX_SCORE: 34, // 12 (T1) + 12 (T2) + 10 (T3) = 34
    CORRECT_ANSWERS: {
        task1: {
            t1s1: 'synthesis', t1s2: 'short-sighted', t1s3: 'sporadic',
            t1s4: 'limitations', t1s5: 'detached', t1s6: 'overly',
            t1s7: 'nuance', t1s8: 'clarify', t1s9: 'ambiguous',
            t1s10: 'spurious', t1s11: 'inequalities', t1s12: 'adaptive'
        },
        // –î–ª—è task2 –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–∏—à–µ 6 –ø–∏—Ç–∞–Ω—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏
        task2: {
            r2q2: 'C', r2q4: 'A', r2q6: 'A', r2q8: 'A', r2q10: 'A', r2q12: 'A'
        }
    }
};

// üõ†Ô∏è –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏
class Utils {
    static showError(elementId, message) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = message;
            element.style.display = 'block';
            setTimeout(() => { element.style.display = 'none'; }, 5000);
        }
    }

    static showSuccess(message) { this.showNotification(message, 'success'); }

    static showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; 
            background: rgba(15, 32, 39, 0.9); /* –¢–µ–º–Ω–∏–π —Ñ–æ–Ω */
            color: white; padding: 16px 20px; border-radius: 15px; 
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            z-index: 10000; transform: translateX(400px); 
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            max-width: 400px; backdrop-filter: blur(10px); 
            border: 1px solid rgba(255,255,255,0.2);
            font-size: 1rem;
        `;
        const icons = { success: '‚úÖ', error: '‚ùå', warning: '‚ö†Ô∏è', info: '‚ÑπÔ∏è' };
        const icon = icons[type] || icons.info;
        
        notification.innerHTML = `<div style="display: flex; align-items: center;"><span style="font-size: 1.2rem; margin-right: 10px;">${icon}</span><span>${message}</span></div>`;
        
        document.body.appendChild(notification);
        setTimeout(() => { notification.style.transform = 'translateX(0)'; }, 100);
        setTimeout(() => {
            notification.style.transform = 'translateX(400px)';
            setTimeout(() => { if (notification.parentNode) { notification.parentNode.removeChild(notification); } }, 400);
        }, 5000);
    }

    static generateLogin(name) {
        const base = name.toLowerCase().split(' ').filter(n => n).join('');
        const users = DataStorage.getUsers();
        let login = base;
        let counter = 1;
        while (users.find(user => user.login === login)) { login = base + counter; counter++; }
        return login.substring(0, 10);
    }

    static generatePassword() {
        const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
        let password = '';
        for (let i = 0; i < 8; i++) { password += chars.charAt(Math.floor(Math.random() * chars.length)); }
        return password;
    }

    static generateStudentNumber() {
        const users = DataStorage.getUsers();
        const usedNumbers = users.map(u => u.studentNumber).filter(n => n);
        let number;
        do { number = Math.floor(Math.random() * 100000) + 10000; } while (usedNumbers.includes(number));
        return number;
    }

    static formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    static calculate12PointScore(rawScore, maxScore) {
        // –ü—Ä–æ—Å—Ç–∞ –ª—ñ–Ω—ñ–π–Ω–∞ —à–∫–∞–ª–∞ –¥–æ 12 –±–∞–ª—ñ–≤
        const score = Math.round((rawScore / maxScore) * 12);
        return Math.min(Math.max(score, 0), 12);
    }

    static createRipple(event) {
        const button = event.currentTarget;
        const circle = document.createElement('span');
        const diameter = Math.max(button.clientWidth, button.clientHeight);
        const radius = diameter / 2;
        circle.style.width = circle.style.height = `${diameter}px`;
        circle.style.left = `${event.clientX - button.getBoundingClientRect().left - radius}px`;
        circle.style.top = `${event.clientY - button.getBoundingClientRect().top - radius}px`;
        circle.classList.add('ripple');
        const ripple = button.getElementsByClassName('ripple')[0];
        if (ripple) { ripple.remove(); }
        button.appendChild(circle);
    }
}

// üíæ –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —Å—Ö–æ–≤–∏—â–µ –¥–∞–Ω–∏—Ö
class DataStorage {
    static getUsers() {
        try {
            const users = JSON.parse(localStorage.getItem('olympiad_users')) || [];
            return users.map(user => ({
                ...user,
                // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö
                status: user.studentNumber ? 'ACTIVE' : 'INACTIVE'
            }));
        } catch (error) { return []; }
    }

    static saveUsers(users) {
        try {
            localStorage.setItem('olympiad_users', JSON.stringify(users));
            return true;
        } catch (error) { return false; }
    }

    static getCurrentUser() {
        try {
            const user = JSON.parse(localStorage.getItem('current_user'));
            if (user) {
                 // –û–Ω–æ–≤–ª—é—î–º–æ, —è–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –≤—Ö—ñ–¥ (–Ω–µ –º–∞—î studentNumber)
                if (!user.studentNumber) {
                    user.studentNumber = Utils.generateStudentNumber();
                    this.updateUserInDatabase(user);
                }
                user.status = 'ACTIVE';
                localStorage.setItem('current_user', JSON.stringify(user));
            }
            return user;
        } catch (error) { return null; }
    }

    static setCurrentUser(user) {
        try {
            if (!user.studentNumber) {
                user.studentNumber = Utils.generateStudentNumber();
                user.status = 'ACTIVE';
                this.updateUserInDatabase(user);
            }
            localStorage.setItem('current_user', JSON.stringify(user));
            return true;
        } catch (error) { return false; }
    }

    static updateUserInDatabase(updatedUser) {
        const users = this.getUsers();
        const index = users.findIndex(u => u.id === updatedUser.id);
        if (index !== -1) {
            users[index] = updatedUser;
            this.saveUsers(users);
        }
    }

    static clearCurrentUser() { localStorage.removeItem('current_user'); }

    static getProgress() {
        try { return JSON.parse(localStorage.getItem('olympiad_progress')) || {}; } catch (error) { return {}; }
    }

    static saveProgress(progress) {
        try {
            localStorage.setItem('olympiad_progress', JSON.stringify(progress));
            return true;
        } catch (error) { return false; }
    }

    static isAdminAuthenticated() { return localStorage.getItem('admin_authenticated') === 'true'; }

    static setAdminAuthenticated(value) {
        if (value) { localStorage.setItem('admin_authenticated', 'true'); } else { localStorage.removeItem('admin_authenticated'); }
    }
}

// ‚è±Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ª—ñ–º–ø—ñ–∞–¥–∏
class OlympiadManager {
    constructor() {
        this.currentTask = 1;
        this.totalTasks = 3;
        this.timeRemaining = CONFIG.TASK_TIME;
        this.timerInterval = null;
        this.isFinished = false;
        this.fullscreenExitCount = 0;
        this.totalTimeSpent = 0;
        this.viewMode = false;
        this.answers = {};
    }

    init() {
        this.setupEventListeners();
        this.startTimer();
        this.showTask(1);
    }

    setupEventListeners() {
        document.addEventListener('fullscreenchange', () => {
            if (!document.fullscreenElement && !this.isFinished) { this.handleFullscreenExit(); }
        });
        document.addEventListener('visibilitychange', () => {
            if (document.hidden && !this.isFinished) { this.handleVisibilityChange(); }
        });
        window.addEventListener('beforeunload', (e) => {
            if (!this.isFinished) { e.preventDefault(); e.returnValue = '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É? –ü—Ä–æ–≥—Ä–µ—Å –º–æ–∂–µ –±—É—Ç–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ.'; }
        });
    }

    handleFullscreenExit() {
        if (this.isFinished) return;
        this.fullscreenExitCount++;
        this.pauseTimer();
        
        if (this.fullscreenExitCount >= CONFIG.MAX_FULLSCREEN_EXITS) {
            this.forceFinish();
        } else {
            this.showFullscreenWarning();
            // –î–∞—î–º–æ 2 —Å–µ–∫—É–Ω–¥–∏, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º
            setTimeout(() => { this.enterFullscreen(); }, 2000);
        }
    }

    showFullscreenWarning() {
        const warning = document.getElementById('fullscreenWarning');
        if (warning) {
            warning.textContent = `–£–≤–∞–≥–∞! –í–∏ –≤–∏–π—à–ª–∏ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É ${this.fullscreenExitCount} —Ä–∞–∑—ñ–≤. –ü—ñ—Å–ª—è ${CONFIG.MAX_FULLSCREEN_EXITS} –≤–∏—Ö–æ–¥—ñ–≤ —Ç–µ—Å—Ç –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`;
            warning.style.display = 'block';
            Utils.showNotification(`–í–∏—Ö—ñ–¥: ${this.fullscreenExitCount}/${CONFIG.MAX_FULLSCREEN_EXITS}. –¢–µ—Å—Ç –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.`, 'warning');
        }
    }

    forceFinish() {
        this.isFinished = true;
        this.stopTimer();
        Utils.showNotification(`–¢–µ—Å—Ç –ø—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –≤–∏—Ö–æ–¥—ñ–≤.`, 'error');
        this.finishOlympiad(true);
    }

    handleVisibilityChange() {
        if (!this.isFinished) {
            if (document.hidden) {
                this.pauseTimer();
                Utils.showNotification('–¢–∞–π–º–µ—Ä –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.', 'warning');
            } else {
                this.startTimer();
                Utils.showSuccess('–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–ª—ñ–º–ø—ñ–∞–¥—É.');
            }
        }
    }

    startTimer() {
        this.stopTimer();
        this.timerInterval = setInterval(() => {
            if (this.timeRemaining > 0) {
                this.timeRemaining--;
                this.updateTimerDisplay();
            } else {
                this.nextTask();
            }
        }, 1000);
    }

    stopTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
    }

    pauseTimer() { this.stopTimer(); }

    updateTimerDisplay() {
        const timerElement = document.getElementById('timer');
        if (timerElement) {
            timerElement.textContent = Utils.formatTime(this.timeRemaining);
            // –í—ñ–∑—É–∞–ª—å–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
            if (this.timeRemaining < 300 && this.timeRemaining >= 0) {
                timerElement.classList.add('pulse', 'critical');
            } else if (this.timeRemaining < 600) {
                timerElement.classList.add('warning');
            } else {
                timerElement.classList.remove('pulse', 'critical', 'warning');
            }
        }
    }

    nextTask() {
        this.saveCurrentTaskAnswers();
        this.totalTimeSpent += (CONFIG.TASK_TIME - this.timeRemaining);
        
        if (this.currentTask < this.totalTasks) {
            this.currentTask++;
            this.timeRemaining = CONFIG.TASK_TIME; // –°–∫–∏–¥–∞—î–º–æ —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–æ–≤–Ω–∏–π —á–∞—Å
            this.showTask(this.currentTask);
            this.startTimer();
            Utils.showSuccess(`–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è ${this.currentTask}`);
        } else {
            this.finishOlympiad();
        }
    }

    showTask(taskNumber) {
        if (this.isFinished && !this.viewMode) return;
        
        this.currentTask = taskNumber;
        
        document.querySelectorAll('.task-section').forEach(task => { 
            task.style.display = 'none';
            task.classList.remove('active');
        });
        const currentTaskElement = document.getElementById(`task${taskNumber}`);
        if (currentTaskElement) {
            currentTaskElement.style.display = 'block';
            currentTaskElement.classList.add('active');
        }
        
        this.updateNavigation(taskNumber);
        this.loadTaskAnswers(taskNumber);
    }

    updateNavigation(taskNumber) {
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn1 = document.getElementById('nextBtn1');
        const nextBtn2 = document.getElementById('nextBtn2');
        const finishBtn = document.getElementById('finishBtn');

        // –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —É –≤–µ—Ä—Ö–Ω—å–æ–º—É –±–ª–æ—Ü—ñ
        if (prevBtn) {
            prevBtn.style.display = taskNumber > 1 ? 'block' : 'none';
        }

        // –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞–ª—ñ/–ù–∞–∑–∞–¥" —É –Ω–∏–∂–Ω—ñ—Ö –±–ª–æ–∫–∞—Ö
        document.getElementById('task1Controls').style.display = taskNumber === 1 ? 'flex' : 'none';
        document.getElementById('task2Controls').style.display = taskNumber === 2 ? 'flex' : 'none';
        document.getElementById('task3Controls').style.display = taskNumber === 3 ? 'flex' : 'none';
        
        // –ö–Ω–æ–ø–∫–∞ –ó–∞–≤–µ—Ä—à–∏—Ç–∏
        if (finishBtn) {
            finishBtn.textContent = this.viewMode ? '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥' : '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–ª—ñ–º–ø—ñ–∞–¥—É';
        }
        
        // –£ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É –±–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É "–î–∞–ª—ñ" —ñ –ø–æ–∫–∞–∑—É—î–º–æ –ª–∏—à–µ "–ù–∞–∑–∞–¥"
        if (this.viewMode) {
            document.querySelectorAll('.task-controls button').forEach(btn => {
                if (btn.id.startsWith('nextBtn') || btn.id === 'finishBtn') {
                    btn.style.display = 'none';
                }
            });
            prevBtn.style.display = taskNumber > 1 ? 'block' : 'none';
            this.addBackToResultsButton(); // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        }
    }

    previousTask() {
        if (this.currentTask > 1) {
            this.saveCurrentTaskAnswers();
            this.currentTask--;
            this.showTask(this.currentTask);
        }
    }

    saveCurrentTaskAnswers() {
        this.answers[`task${this.currentTask}`] = this.getTaskAnswers(this.currentTask);
    }

    loadTaskAnswers(taskNumber) {
        const savedAnswers = this.answers[`task${taskNumber}`] || {};
        const taskElement = document.getElementById(`task${taskNumber}`);
        if (!taskElement) return;

        taskElement.querySelectorAll('select, input, textarea').forEach(element => {
            const id = element.id;
            if (savedAnswers[id]) element.value = savedAnswers[id];
            
            // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É
            if (this.viewMode) {
                element.disabled = true;
                element.style.opacity = '0.7';
                element.style.cursor = 'not-allowed';
            } else {
                element.disabled = false;
                element.style.opacity = '1';
                element.style.cursor = 'auto';
            }
        });
    }

    getTaskAnswers(taskNumber) {
        const answers = {};
        const taskElement = document.getElementById(`task${taskNumber}`);
        if (!taskElement) return answers;
        taskElement.querySelectorAll('select, input, textarea').forEach(element => {
            answers[element.id] = element.value.trim();
        });
        return answers;
    }


    enterFullscreen() {
        if (document.documentElement.requestFullscreen && !document.fullscreenElement) {
            document.documentElement.requestFullscreen().catch(error => {
                Utils.showNotification('–ù–µ–º–æ–∂–ª–∏–≤–æ —É–≤—ñ–π—Ç–∏ –≤ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Ä–æ–±–æ—Ç—É.', 'warning');
            });
        }
    }

    finishOlympiad(forced = false) {
        if (this.isFinished && !this.viewMode) return;
        
        if (this.viewMode) {
            this.viewMode = false;
            this.showResults(); // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            Utils.showSuccess('–ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
            return;
        }

        this.isFinished = true;
        this.stopTimer();
        this.saveCurrentTaskAnswers();
        
        if (document.fullscreenElement) { document.exitFullscreen().catch(console.log); }
        
        this.saveResults(forced);
        this.showResults();
        
        if (!forced) {
            Utils.showSuccess('–û–ª—ñ–º–ø—ñ–∞–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. üéâ');
        }
    }

    saveResults(forced = false) {
        const currentUser = DataStorage.getCurrentUser();
        if (!currentUser) return;

        const progress = DataStorage.getProgress();
        const score = this.calculateScore();
        const score12 = Utils.calculate12PointScore(score, CONFIG.MAX_SCORE);
        
        // –Ø–∫—â–æ –Ω–µ –ø—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —ñ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ —á–∞—Å, —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
        if (!forced) {
            this.totalTimeSpent += (CONFIG.TASK_TIME - this.timeRemaining);
        }

        progress[currentUser.id] = {
            completed: true,
            timestamp: new Date().toISOString(),
            timeSpent: this.totalTimeSpent,
            fullscreenExits: this.fullscreenExitCount,
            score: score,
            score12: score12,
            answers: this.answers,
            forced: forced
        };
        DataStorage.saveProgress(progress);
    }

    calculateScore() {
        let score = 0;
        const answers = this.answers;

        // –ó–∞–≤–¥–∞–Ω–Ω—è 1: Lexical (12 –±–∞–ª—ñ–≤) - –¢–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
        if (answers.task1) {
            Object.keys(CONFIG.CORRECT_ANSWERS.task1).forEach(key => {
                const userAnswer = answers.task1[key];
                const correctAnswer = CONFIG.CORRECT_ANSWERS.task1[key];
                if (userAnswer && userAnswer.toLowerCase() === correctAnswer.toLowerCase()) {
                    score += 1;
                }
            });
        }
        
        // –ó–∞–≤–¥–∞–Ω–Ω—è 2: Reading (12 –±–∞–ª—ñ–≤)
        if (answers.task2) {
            // MC (6 –ø–∏—Ç–∞–Ω—å) - –¢–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
            Object.keys(CONFIG.CORRECT_ANSWERS.task2).forEach(id => {
                const userAnswer = answers.task2[id];
                const correctAnswer = CONFIG.CORRECT_ANSWERS.task2[id];
                if (userAnswer && userAnswer.toUpperCase() === correctAnswer.toUpperCase()) {
                    score += 1;
                }
            });
            // Short Answers (6 –ø–∏—Ç–∞–Ω—å) - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–∏—à–µ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏)
            const shortAnswers = ['r2q1', 'r2q3', 'r2q5', 'r2q7', 'r2q9', 'r2q11'];
            shortAnswers.forEach(id => {
                if (answers.task2[id] && answers.task2[id].trim().length > 2) {
                    score += 1;
                }
            });
        }
        
        // –ó–∞–≤–¥–∞–Ω–Ω—è 3: Key Word Transformation (10 –±–∞–ª—ñ–≤) - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–∏—à–µ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤)
        if (answers.task3) {
            for (let i = 1; i <= 10; i++) {
                const key = `t3q${i}`;
                if (answers.task3[key] && answers.task3[key].trim().length > 10) {
                    score += 1;
                }
            }
        }
        
        return Math.min(score, CONFIG.MAX_SCORE);
    }

    showResults() {
        const resultsScreen = document.getElementById('resultsScreen');
        const tasksContainer = document.getElementById('tasks');
        
        if (resultsScreen && tasksContainer) {
            tasksContainer.style.display = 'none';
            document.getElementById('intro').style.display = 'none';
            resultsScreen.style.display = 'block';
            resultsScreen.classList.add('fade-in');
            this.displayResults();
        }
    }

    displayResults() {
        const resultsContent = document.getElementById('resultsContent');
        const currentUser = DataStorage.getCurrentUser();
        const progress = DataStorage.getProgress();
        const userProgress = progress[currentUser.id] || {score: 0, score12: 0, timeSpent: 0, fullscreenExits: 0, timestamp: new Date().toISOString(), forced: false};
        
        if (!resultsContent) return;
        
        const forcedMessage = userProgress.forced 
            ? '<p style="color: var(--danger); font-weight: bold; margin-bottom: 10px;">üî¥ –¢–µ—Å—Ç –±—É–≤ –ø—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª (–≤–∏—Ö–æ–¥–∏ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω—É).</p>' 
            : '';

        resultsContent.innerHTML = `
            <div class="header-section">
                <div class="logo">üéâ</div>
                <h1>${userProgress.forced ? '–ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è!' : '–û–ª—ñ–º–ø—ñ–∞–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'}</h1>
                <p class="subtitle">–í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ</p>
            </div>
            ${forcedMessage}
            <div class="stats-grid" style="margin: 40px 0;">
                <div class="stat-card glass-card">
                    <div class="stat-number">${userProgress.score}/${CONFIG.MAX_SCORE}</div>
                    <div class="stat-label">–°–∏—Ä—ñ –±–∞–ª–∏</div>
                </div>
                <div class="stat-card glass-card">
                    <div class="stat-number">${userProgress.score12}/12</div>
                    <div class="stat-label">12-–±–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞</div>
                </div>
                <div class="stat-card glass-card">
                    <div class="stat-number">${Utils.formatTime(userProgress.timeSpent)}</div>
                    <div class="stat-label">–í–∏—Ç—Ä–∞—á–µ–Ω–æ —á–∞—Å—É</div>
                </div>
                <div class="stat-card glass-card">
                    <div class="stat-number">${userProgress.fullscreenExits}</div>
                    <div class="stat-label">–í–∏—Ö–æ–¥–∏ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω—É</div>
                </div>
            </div>
            <div class="glass-card" style="padding: 30px; margin-bottom: 25px;">
                <h3 style="color: var(--accent); margin-bottom: 20px; text-align: center;">üìä –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                    <div><strong>üë§ –£—á–µ–Ω—å:</strong> ${currentUser.name}</div>
                    <div><strong>üè´ –ö–ª–∞—Å:</strong> ${currentUser.class}</div>
                    <div><strong>üî¢ –ù–æ–º–µ—Ä —É—á–Ω—è:</strong> <span style="font-weight: bold; color: var(--primary);">${currentUser.studentNumber}</span></div>
                    <div><strong>üìÖ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:</strong> ${new Date(userProgress.timestamp).toLocaleString('uk-UA')}</div>
                </div>
            </div>
            <div style="text-align: center; margin: 30px 0;">
                <button id="viewAnswersBtn" class="btn-primary" style="padding: 15px 30px; font-size: 1.1rem;">
                    üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                </button>
            </div>
            <div style="text-align: center; margin-top: 30px;">
                <button id="backToHomeBtn" class="btn-secondary" style="padding: 12px 24px;">
                    ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
                </button>
            </div>
        `;

        document.getElementById('viewAnswersBtn').addEventListener('click', () => { this.enableViewMode(); });
        document.getElementById('backToHomeBtn').addEventListener('click', () => { window.location.href = 'index.html'; });
    }

    enableViewMode() {
        this.viewMode = true;
        document.getElementById('tasks').style.display = 'block';
        document.getElementById('resultsScreen').style.display = 'none';
        
        this.showTask(1);
        this.addBackToResultsButton();
        Utils.showNotification('–†–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É. –í—Å—ñ –ø–æ–ª—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.', 'info');
    }

    addBackToResultsButton() {
        const taskNavigation = document.querySelector('.task-navigation');
        let backBtn = document.getElementById('backToResultsBtn');
        
        if (taskNavigation && !backBtn) {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
            backBtn = document.createElement('button');
            backBtn.id = 'backToResultsBtn';
            backBtn.textContent = '‚Üê –î–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤';
            backBtn.className = 'btn-secondary';
            backBtn.style.padding = '10px 15px';
            
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –≤ Task Navigation
            const controlsContainer = taskNavigation.querySelector('div:last-child');
            if (controlsContainer) {
                 // –í—Å—Ç–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ —ñ–Ω—à–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
                controlsContainer.prepend(backBtn);
            }
        }
        
        if (backBtn) {
            // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫, —è–∫—â–æ –≤—ñ–Ω —â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π
            backBtn.onclick = () => {
                this.viewMode = false;
                this.showResults();
            };
            backBtn.style.display = 'block';
        }
    }
}

// üöÄ –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É
class EnglishOlympiadApp {
    constructor() {
        this.olympiadManager = null;
    }

    init() {
        this.checkCurrentPage();
        this.setupGlobalEventListeners();
        console.log('üéØ English Olympiad App initialized');
    }

    checkCurrentPage() {
        const path = window.location.pathname;
        if (path.includes('admin.html')) {
            this.initAdminPage();
        } else if (path.includes('student.html')) {
            this.initStudentPage();
        } else if (path.includes('index.html') || path === '/') {
            this.initMainPage();
        }
    }

    setupGlobalEventListeners() {
        // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø–æ—è–≤–∏ —Ç—ñ–ª–∞
        document.body.classList.add('fade-in');
        this.addRippleEffects(document.body);
    }

    initMainPage() {
        this.setupModeSelection();
        this.setupLoginForms();
    }

    addRippleEffects(container) {
        container.querySelectorAll('button, .mode-card').forEach(element => {
            // –£–Ω–∏–∫–∞—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
            if (element.hasAttribute('data-ripple-setup')) return;
            
            element.addEventListener('click', (e) => {
                Utils.createRipple(e);
            });
            element.setAttribute('data-ripple-setup', 'true');
        });
    }

    // üí° –§–Ü–ù–ê–õ–¨–ù–ò–ô –§–Ü–ö–°: –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ .mode-card
    setupModeSelection() {
        document.querySelectorAll('.mode-card button').forEach(button => {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ data-mode, –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –∫–Ω–æ–ø–∫–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫
            button.addEventListener('click', (e) => {
                e.preventDefault(); // !!! –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –Ω–µ–±–∞–∂–∞–Ω—ñ–π –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó (–≤–∏—Ä—ñ—à—É—î ERR_NAME_NOT_RESOLVED)
                
                const mode = button.getAttribute('data-mode');
                if (mode) {
                    this.showLoginForm(mode);
                } else {
                    console.error("–ö–Ω–æ–ø–∫–∞ –Ω–µ –º–∞—î data-mode –∞—Ç—Ä–∏–±—É—Ç—É.");
                }
            });
        });
    }

    setupLoginForms() {
        document.getElementById('studentLoginBtn').addEventListener('click', () => { this.handleStudentLogin(); });
        document.getElementById('adminLoginBtn').addEventListener('click', () => { this.handleAdminLogin(); });
        document.getElementById('backFromStudentBtn').addEventListener('click', () => { this.showMainMenu(); });
        document.getElementById('backFromAdminBtn').addEventListener('click', () => { this.showMainMenu(); });
        
        // Enter key listeners
        document.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                if (document.getElementById('studentLogin').style.display === 'block') {
                    this.handleStudentLogin();
                } else if (document.getElementById('adminLogin').style.display === 'block') {
                    this.handleAdminLogin();
                }
            }
        });
    }

    showMainMenu() {
        document.getElementById('modeSelector').style.display = 'flex'; // grid
        document.getElementById('studentLogin').style.display = 'none';
        document.getElementById('adminLogin').style.display = 'none';
    }

    showLoginForm(mode) {
        const modeSelector = document.getElementById('modeSelector');
        const studentLogin = document.getElementById('studentLogin');
        const adminLogin = document.getElementById('adminLogin');
        
        if (!modeSelector || !studentLogin || !adminLogin) {
            console.error("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ DOM: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ index.html!");
            return;
        }

        modeSelector.style.display = 'none';
        
        if (mode === 'student') {
            studentLogin.style.display = 'block';
            adminLogin.style.display = 'none';
            document.getElementById('studentLoginInput').focus();
        } else {
            adminLogin.style.display = 'block';
            studentLogin.style.display = 'none';
            document.getElementById('adminLoginInput').focus();
        }
    }

    handleStudentLogin() {
        const login = document.getElementById('studentLoginInput').value.trim();
        const password = document.getElementById('studentPasswordInput').value.trim();
        
        if (!login || !password) { Utils.showError('studentError', '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è'); return; }
        
        const users = DataStorage.getUsers();
        const user = users.find(u => u.login === login && u.password === password);
        if (user) {
            DataStorage.setCurrentUser(user);
            Utils.showSuccess(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${user.name}!`);
            setTimeout(() => { window.location.href = 'student.html'; }, 800);
        } else {
            Utils.showError('studentError', '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å');
        }
    }

    handleAdminLogin() {
        const login = document.getElementById('adminLoginInput').value.trim();
        const password = document.getElementById('adminPasswordInput').value.trim();
        const codeWord = document.getElementById('adminCodeWord').value.trim();
        
        if (login === CONFIG.ADMIN_LOGIN && 
            password === CONFIG.ADMIN_PASSWORD && 
            codeWord === CONFIG.ADMIN_CODE_WORD) {
            
            DataStorage.setAdminAuthenticated(true);
            Utils.showSuccess('–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...');
            
            setTimeout(() => { window.location.href = 'admin.html'; }, 800);
        } else {
            Utils.showError('adminError', '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ.');
        }
    }

    initAdminPage() {
        if (!DataStorage.isAdminAuthenticated()) {
            window.location.href = 'index.html';
            return;
        }
        this.setupAdminPanel();
    }

    setupAdminPanel() {
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', (e) => { this.switchAdminTab(tab.getAttribute('data-tab')); });
        });
        document.getElementById('createUserBtn').addEventListener('click', () => { this.createUser(); });
        document.getElementById('userSearch').addEventListener('input', (e) => { this.filterUsers(e.target.value); });
        document.getElementById('adminLogoutBtn').addEventListener('click', () => {
            DataStorage.setAdminAuthenticated(false);
            window.location.href = 'index.html';
        });
        
        this.updateUsersList();
        this.updateStats();
        // –†–æ–±–∏–º–æ –≥–ª–æ–±–∞–ª—å–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è onclick
        window.app.deleteUser = this.deleteUser.bind(this);
    }

    switchAdminTab(tabName) {
        document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.panel').forEach(panel => panel.classList.remove('active'));
        
        const activeTab = document.querySelector(`.tab[data-tab="${tabName}"]`);
        const activePanel = document.getElementById(`${tabName}Panel`);
        
        if (activeTab) activeTab.classList.add('active');
        if (activePanel) activePanel.classList.add('active');
        
        if (tabName === 'users') this.updateUsersList();
        if (tabName === 'stats') this.updateStats();
    }

    createUser() {
        const name = document.getElementById('newUserName').value.trim();
        const studentClass = document.getElementById('newUserClass').value;
        const group = document.getElementById('newUserGroup').value.trim();
        
        if (!name || !studentClass) { Utils.showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º\'—è —Ç–∞ –∫–ª–∞—Å —É—á–Ω—è', 'warning'); return; }
        
        const login = Utils.generateLogin(name);
        const password = Utils.generatePassword();
        
        const newUser = { id: Date.now(), name, class: studentClass, group: group || '', login, password, studentNumber: null, created: new Date().toLocaleString('uk-UA') };
        const users = DataStorage.getUsers();
        users.push(newUser);
        
        if (DataStorage.saveUsers(users)) {
            this.showCreatedCredentials(newUser);
            document.getElementById('newUserName').value = '';
            document.getElementById('newUserGroup').value = '';
            this.updateStats();
            Utils.showSuccess('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        } else {
            Utils.showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', 'error');
        }
    }

    showCreatedCredentials(user) {
        const credentialsBox = document.getElementById('createdCredentials');
        const credentialsInfo = document.getElementById('credentialsInfo');
        if (!credentialsBox || !credentialsInfo) return;
            
        credentialsInfo.innerHTML = `
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                <div><strong>–Ü–º'—è:</strong> ${user.name}</div>
                <div><strong>–ö–ª–∞—Å:</strong> ${user.class}</div>
                <div><strong>–õ–æ–≥—ñ–Ω:</strong> <code>${user.login}</code></div>
                <div><strong>–ü–∞—Ä–æ–ª—å:</strong> <code>${user.password}</code></div>
            </div>
        `;
        credentialsBox.style.display = 'block';
        
        const copyBtn = document.getElementById('copyCredentialsBtn');
        if (copyBtn) {
            copyBtn.onclick = () => {
                const text = `–Ü–º'—è: ${user.name}\n–ö–ª–∞—Å: ${user.class}\n–õ–æ–≥—ñ–Ω: ${user.login}\n–ü–∞—Ä–æ–ª—å: ${user.password}\n\n–ù–æ–º–µ—Ä —É—á–Ω—è –±—É–¥–µ –ø—Ä–∏—Å–≤–æ—î–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤—Ö–æ–¥—ñ.`;
                navigator.clipboard.writeText(text);
                Utils.showSuccess('–î–∞–Ω—ñ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É');
            };
        }
    }

    updateUsersList(users = DataStorage.getUsers()) {
        const container = document.getElementById('usersListContainer');
        if (!container) return;
        
        if (users.length === 0) {
            container.innerHTML = `<div class="glass-card" style="text-align: center; padding: 50px; color: var(--text-secondary);"><div style="font-size: 4rem; margin-bottom: 20px;">üìù</div><h3 style="margin-bottom: 15px; color: var(--text-primary);">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ</h3><p>–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≤–∫–ª–∞–¥—Ü—ñ "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"</p></div>`;
            return;
        }
        
        const header = `
            <div class="user-item header">
                <div>–Ü–º'—è</div>
                <div>–ö–ª–∞—Å</div>
                <div>–ù–æ–º–µ—Ä —É—á–Ω—è</div>
                <div>–õ–æ–≥—ñ–Ω</div>
                <div>–ü–∞—Ä–æ–ª—å</div>
                <div>–°—Ç–∞—Ç—É—Å</div>
                <div>–î—ñ—ó</div>
            </div>
        `;
        
        const listItems = users.map(user => {
            const progress = DataStorage.getProgress()[user.id];
            const resultScore = progress ? ` (${progress.score12}/12)` : '';
            return `
                <div class="user-item glass-card">
                    <div>${user.name}</div>
                    <div>${user.class}</div>
                    <div>${user.studentNumber ? `<span class="student-number-badge">${user.studentNumber}</span>` : '<span class="status-badge inactive">–ù–ï–ê–ö–¢–ò–í–ù–û</span>'}</div>
                    <div><code>${user.login}</code></div>
                    <div><code>${user.password}</code></div>
                    <div>${user.studentNumber ? `<span class="status-badge active">–ê–ö–¢–ò–í–ù–ò–ô${resultScore}</span>` : '<span class="status-badge inactive">–ù–ï–ê–ö–¢–ò–í–ù–ò–ô</span>'}</div>
                    <div><button class="btn-danger" onclick="app.deleteUser(${user.id})">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button></div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = header + listItems;
    }

    filterUsers(searchTerm) {
        const users = DataStorage.getUsers();
        const term = searchTerm.toLowerCase();
        const filtered = users.filter(user => 
            user.name.toLowerCase().includes(term) ||
            user.login.toLowerCase().includes(term) ||
            (user.studentNumber && user.studentNumber.toString().includes(term))
        );
        this.updateUsersList(filtered);
    }

    deleteUser(userId) {
        if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞? –¶–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –π–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.')) {
            const users = DataStorage.getUsers();
            const updatedUsers = users.filter(user => user.id !== userId);
            
            const progress = DataStorage.getProgress();
            delete progress[userId]; 

            if (DataStorage.saveUsers(updatedUsers) && DataStorage.saveProgress(progress)) {
                this.updateUsersList();
                this.updateStats();
                Utils.showSuccess('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –π–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ');
            } else {
                Utils.showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', 'error');
            }
        }
    }

    updateStats() {
        const users = DataStorage.getUsers();
        const stats = {
            totalUsers: users.length,
            activeUsers: users.filter(u => u.studentNumber !== null).length,
            class9Users: users.filter(u => u.class == 9).length,
            class10Users: users.filter(u => u.class == 10).length,
            class11Users: users.filter(u => u.class == 11).length
        };
        Object.entries(stats).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) { element.textContent = value; }
        });
    }

    initStudentPage() {
        const currentUser = DataStorage.getCurrentUser();
        if (!currentUser) { window.location.href = 'index.html'; return; }

        this.updateStudentInterface(currentUser);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –æ–ª—ñ–º–ø—ñ–∞–¥–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        const progress = DataStorage.getProgress();
        if (progress[currentUser.id] && progress[currentUser.id].completed) {
            this.olympiadManager = new OlympiadManager();
            this.olympiadManager.answers = progress[currentUser.id].answers || {};
            document.getElementById('intro').style.display = 'none';
            document.getElementById('tasks').style.display = 'none';
            this.olympiadManager.showResults();
        } else {
            this.setupStudentEventListeners();
        }
    }

    updateStudentInterface(user) {
        const studentInfo = document.getElementById('studentInfo');
        if (studentInfo) {
            studentInfo.innerHTML = `
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">
                    <div style="text-align: center;"><div style="font-size: 3rem; margin-bottom: 10px;">üë§</div><div style="font-weight: 700; color: var(--text-primary);">${user.name}</div><div style="color: var(--text-secondary); font-size: 0.9rem;">–£—á–µ–Ω—å</div></div>
                    <div style="text-align: center;"><div style="font-size: 3rem; margin-bottom: 10px;">üè´</div><div style="font-weight: 700; color: var(--text-primary);">${user.class}</div><div style="color: var(--text-secondary); font-size: 0.9rem;">–ö–ª–∞—Å</div></div>
                    <div style="text-align: center;"><div style="font-size: 3rem; margin-bottom: 10px;">üî¢</div><div style="font-weight: 700; color: var(--accent);">${user.studentNumber}</div><div style="color: var(--text-secondary); font-size: 0.9rem;">–ù–æ–º–µ—Ä</div></div>
                    <div style="text-align: center;"><div style="font-size: 3rem; margin-bottom: 10px;">üìä</div><div style="font-weight: 700; color: var(--success);">–ì–æ—Ç–æ–≤–∏–π</div><div style="color: var(--text-secondary); font-size: 0.9rem;">–°—Ç–∞—Ç—É—Å</div></div>
                </div>
            `;
        }
    }

    setupStudentEventListeners() {
        
        document.getElementById('startBtn').addEventListener('click', () => { this.startOlympiad(); });
        document.getElementById('logoutBtn').addEventListener('click', () => {
            if (confirm('–í–∏–π—Ç–∏ –∑ —Å–∏—Å—Ç–µ–º–∏?')) {
                DataStorage.clearCurrentUser();
                window.location.href = 'index.html';
            }
        });

        // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –º—ñ–∂ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .closest —â–æ–± –∑–Ω–∞–π—Ç–∏ OlympiadManager)
        const getManager = () => this.olympiadManager;
        
        document.getElementById('nextBtn1').addEventListener('click', () => { if (getManager()) getManager().nextTask(); });
        document.getElementById('nextBtn2').addEventListener('click', () => { if (getManager()) getManager().nextTask(); });
        document.getElementById('prevBtn2').addEventListener('click', () => { if (getManager()) getManager().previousTask(); });
        document.getElementById('prevBtn3').addEventListener('click', () => { if (getManager()) getManager().previousTask(); });
        document.getElementById('finishBtn').addEventListener('click', () => { if (getManager()) getManager().finishOlympiad(); });
        document.getElementById('prevBtn').addEventListener('click', () => { if (getManager()) getManager().previousTask(); });
    }

    startOlympiad() {
        document.getElementById('intro').style.display = 'none';
        document.getElementById('tasks').style.display = 'block';
        
        this.olympiadManager = new OlympiadManager();
        this.olympiadManager.init();
        this.olympiadManager.enterFullscreen();
    }
}

// üöÄ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –î–û–î–ê–¢–ö–£ (–§–Ü–ù–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê DOM)
let app; 

document.addEventListener('DOMContentLoaded', () => {
    app = new EnglishOlympiadApp();
    app.init(); 
    window.app = app; 

    console.log('üéØ English Olympiad System loaded successfully!');
});
