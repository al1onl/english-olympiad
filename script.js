// üéØ –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
const CONFIG = {
    // --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ê–¥–º—ñ–Ω–∞ ---
    // –í–ê–ñ–õ–ò–í–û: –õ–æ–≥—ñ–Ω —Ç–∞ –ü–∞—Ä–æ–ª—å –º–∞—é—Ç—å –∑–±—ñ–≥–∞—Ç–∏—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º, —è–∫–æ–≥–æ –≤–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ —É Firebase Auth.
    ADMIN_LOGIN: "admin@olympiad.com", // –õ–æ–≥—ñ–Ω-Email –¥–ª—è Firebase Auth
    ADMIN_PASSWORD: "admin123", // –ü–∞—Ä–æ–ª—å –¥–ª—è Firebase Auth
    ADMIN_CODE_WORD: "olympiad2024", // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–¥ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–∑–∞—Ö–∏—Å—Ç)

    // --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –û–ª—ñ–º–ø—ñ–∞–¥–∏ ---
    TASK_TIME: 20 * 60, // 20 —Ö–≤–∏–ª–∏–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö –Ω–∞ –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    MAX_FULLSCREEN_EXITS: 7, 
    MAX_SCORE: 34, 

    // --- –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ö–ª—é—á—ñ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏) ---
    // –ó–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω
    CORRECT_ANSWERS: {
        task1: {
            t1s1: 'synthesis', t1s2: 'short-sighted', t1s3: 'sporadic',
            t1s4: 'limitations', t1s5: 'detached', t1s6: 'overly',
            t1s7: 'nuance', t1s8: 'clarify', t1s9: 'ambiguous',
            t1s10: 'spurious', t1s11: 'inequalities', t1s12: 'adaptive'
        },
        task2: {
            r2q2: 'C', r2q4: 'A', r2q6: 'A', r2q8: 'A', r2q10: 'A', r2q12: 'A'
        }
    },
    
    // --- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≤–¥–∞–Ω—å (—à–∞–±–ª–æ–Ω HTML) ---
    TASKS_CONTENT: [
        null, // –Ü–Ω–¥–µ–∫—Å 0 –ø–æ—Ä–æ–∂–Ω—ñ–π –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–æ–º–µ—Ä—É –∑–∞–≤–¥–∞–Ω–Ω—è 1, 2, 3
        { 
            title: "–ó–∞–≤–¥–∞–Ω–Ω—è 1. Lexical and Grammatical Transformations (12 –±–∞–ª—ñ–≤)",
            description: "–î–æ–ø–æ–≤–Ω—ñ—Ç—å —Ä–µ—á–µ–Ω–Ω—è, –∑–º—ñ–Ω–∏–≤—à–∏ —Å–ª–æ–≤–∞ —É –¥—É–∂–∫–∞—Ö –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ–æ—Ä–º—É.",
            html: `
                <div class="task-content">
                    <div class="question-block"><p class="question-text">1. The article requires a careful ____________ of all the sources. (SYNTHESIZE)</p><input type="text" id="t1s1" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">2. Her constant focus on minor details made her look ____________. (SHORT-SIGHT)</p><input type="text" id="t1s2" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">3. The sightings of the rare bird were ____________ and difficult to confirm. (SPORADICALLY)</p><input type="text" id="t1s3" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">4. Every technological advance brings with it certain ____________. (LIMIT)</p><input type="text" id="t1s4" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">5. He maintained a professional, almost ____________ attitude during the meeting. (DETACH)</p><input type="text" id="t1s5" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">6. We found the speaker to be ____________ concerned with public image. (OVER)</p><input type="text" id="t1s6" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">7. She spoke about the subtle ____________ of the poem. (NUANCED)</p><input type="text" id="t1s7" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">8. Could you please ____________ your position on this matter? (CLARITY)</p><input type="text" id="t1s8" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">9. His language was often ____________, leaving room for misinterpretation. (AMBIGUITY)</p><input type="text" id="t1s9" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">10. They dismissed the findings as ____________ data from a biased source. (SPUR)</p><input type="text" id="t1s10" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">11. The report highlighted growing social and economic ____________. (EQUAL)</p><input type="text" id="t1s11" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">12. An ____________ strategy is essential in a changing market. (ADAPT)</p><input type="text" id="t1s12" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                </div>
            `
        },
        { 
            title: "–ó–∞–≤–¥–∞–Ω–Ω—è 2. –ß–∏—Ç–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É (12 –±–∞–ª—ñ–≤)",
            description: "–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç —ñ –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ 12 –ø–∏—Ç–∞–Ω—å (6 - –≤–∏–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, 6 - –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å).",
            html: `
                <div class="text-for-reading card-content">
                    <h3 style="margin-bottom: 15px; color: var(--accent);">The Curious Case of Collective Intelligence</h3>
                    <p>Collective intelligence, the ability of a group to make decisions or solve problems better than any single member, has long fascinated scientists. The classic example is the "wisdom of crowds," where the average guess of a large group is often startlingly close to the truth, even if individual guesses are wildly inaccurate. This phenomenon relies on three key elements: diversity of opinion, independence of members, and decentralization of knowledge. When these conditions are met, errors tend to cancel each other out.</p>
                    <p>However, collective intelligence is not foolproof. When crowds lack independence‚Äîfor instance, if members influence each other's opinions, leading to herd mentality‚Äîthe wisdom quickly turns into foolishness. Furthermore, groups often fail when the problem is complex or requires deep, specialized knowledge, rather than a simple aggregation of common sense. The challenge is not merely to gather people, but to structure their interaction in a way that maximizes diversity while ensuring constructive synthesis of ideas.</p>
                </div>

                <div class="task-content">
                    <div class="question-block"><p class="question-text">1. What is the classic example of collective intelligence mentioned in the text? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q1" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">3. What is the primary risk if crowds lack independence? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q3" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">5. What does the text suggest is the main challenge of collective intelligence? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q5" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block">
                        <p class="question-text">2. What is the purpose of collective intelligence? (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q2" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">To simplify complex problems for a single member.</option><option value="B">To ensure individual guesses are always accurate.</option><option value="C">To solve problems better than any single member.</option></select>
                    </div>
                    <div class="question-block">
                        <p class="question-text">4. What is one of the key elements that collective intelligence relies on? (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q4" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">Diversity of opinion.</option><option value="B">Centralization of knowledge.</option><option value="C">Unanimity of thought.</option></select>
                    </div>
                    <div class="question-block">
                        <p class="question-text">6. What happens when members influence each other's opinions? (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q6" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">The wisdom of crowds turns into foolishness.</option><option value="B">The collective knowledge is deepened.</option><option value="C">Independence of members is maximized.</option></select>
                    </div>
                    <div class="question-block"><p class="question-text">7. What is required for the "wisdom of crowds" to work? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q7" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block">
                        <p class="question-text">8. The term 'decentralization' in the text refers to: (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q8" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">Spreading knowledge among many members.</option><option value="B">Giving power to a single, central leader.</option><option value="C">The process of making errors cancel out.</option></select>
                    </div>
                    <div class="question-block"><p class="question-text">9. When do groups often fail? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q9" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block">
                        <p class="question-text">10. The word 'foolproof' most closely means: (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q10" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">Infallible.</option><option value="B">Complicated.</option><option value="C">Transparent.</option></select>
                    </div>
                    <div class="question-block"><p class="question-text">11. What is the process that allows errors to cancel out? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q11" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block">
                        <p class="question-text">12. What kind of problem is *not* easily solved by simple crowd aggregation? (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q12" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">One requiring deep, specialized knowledge.</option><option value="B">One requiring a simple common sense aggregation.</option><option value="C">One where opinions are diverse.</option></select>
                    </div>
                </div>
            `
        },
        { 
            title: "–ó–∞–≤–¥–∞–Ω–Ω—è 3. –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ (10 –±–∞–ª—ñ–≤)",
            description: "–ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π—Ç–µ —Ä–µ—á–µ–Ω–Ω—è —Ç–∞–∫, —â–æ–± –≤–æ–Ω–æ –º–∞–ª–æ —Ç–µ —Å–∞–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞–¥–∞–Ω–µ —Å–ª–æ–≤–æ —É –Ω–µ–∑–º—ñ–Ω–Ω—ñ–π —Ñ–æ—Ä–º—ñ (–º–∞–∫—Å–∏–º—É–º 5 —Å–ª—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ –Ω–∞–¥–∞–Ω–µ).",
            html: `
                <div class="task-content">
                    <div class="question-block"><p class="question-text">1. The accident was caused by his failure to stop. (DID)</p><input type="text" id="t3q1" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">2. We won't be able to finish on time. (POSSIBLE)</p><input type="text" id="t3q2" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">3. It's difficult to see how we can proceed. (EASY)</p><input type="text" id="t3q3" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">4. They only started to cooperate after the crisis. (UNTIL)</p><input type="text" id="t3q4" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">5. She finally realized how serious the situation was. (CAME)</p><input type="text" id="t3q5" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">6. He regrets not having said goodbye to her. (WISHES)</p><input type="text" id="t3q6" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">7. They cancelled the match because of the bad weather. (CALLED)</p><input type="text" id="t3q7" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">8. I found the meeting rather boring. (DID)</p><input type="text" id="t3q8" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">9. It's impossible to finish on time without help. (ABLE)</p><input type="text" id="t3q9" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">10. The teacher insisted on early submission. (DEMAND)</p><input type="text" id="t3q10" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                </div>
            `
        }
    ]
};

// üõ†Ô∏è –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ DOM —Ç–∞ –¥–∞–Ω–∏–º–∏ (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º, –∞–ª–µ —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î UID)
class Utils {
    static getEl(id) { return document.getElementById(id); }
    static hide(element) { if(element) element.classList.add('hidden'); }
    static show(element) { if(element) element.classList.remove('hidden'); }

    static showError(elementId, message) {
        const element = Utils.getEl(elementId);
        if (element) {
            element.textContent = message;
            Utils.show(element);
            setTimeout(() => { Utils.hide(element); }, 5000);
        }
    }

    static showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        const icons = { success: '‚úÖ', error: '‚ùå', warning: '‚ö†Ô∏è', info: '‚ÑπÔ∏è' };
        const icon = icons[type] || icons.info;
        notification.innerHTML = `<div style="display: flex; align-items: center;"><span style="font-size: 1.2rem; margin-right: 10px;">${icon}</span><span>${message}</span></div>`;
        document.body.appendChild(notification);
        setTimeout(() => { notification.classList.add('show'); }, 50);
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => { if (notification.parentNode) { notification.parentNode.removeChild(notification); } }, 400);
        }, 5000);
    }
    static showSuccess(message) { this.showNotification(message, 'success'); }
    static showWarning(message) { this.showNotification(message, 'warning'); }
    static showErrorNotification(message) { this.showNotification(message, 'error'); }
    
    // –¢–µ–ø–µ—Ä –≥–µ–Ω–µ—Ä—É—î –ª–æ–≥—ñ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ email, —â–æ–± –±—É–≤ —Å—É–º—ñ—Å–Ω–∏–π –∑ Firebase Auth
    static generateLogin(name, index) {
        const base = name.toLowerCase().split(' ').filter(n => n).join('');
        const loginName = base.substring(0, 10 + index.toString().length);
        return `${loginName}${index}@olympiad.com`;
    }

    static generatePassword() {
        const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
        let password = '';
        for (let i = 0; i < 8; i++) { password += chars.charAt(Math.floor(Math.random() * chars.length)); }
        return password;
    }

    static generateStudentNumber() {
        return Math.floor(Math.random() * 90000) + 10000;
    }

    static formatTime(seconds) {
        const totalSeconds = Math.max(0, seconds); 
        const mins = Math.floor(totalSeconds / 60);
        const secs = totalSeconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    static calculate12PointScore(rawScore, maxScore) {
        const score = Math.round((rawScore / maxScore) * 12);
        return Math.min(Math.max(score, 0), 12);
    }

    static createRipple(event) {
        const button = event.currentTarget;
        const circle = document.createElement('span');
        const diameter = Math.max(button.clientWidth, button.clientHeight);
        const radius = diameter / 2;
        circle.style.width = circle.style.height = `${diameter}px`;
        circle.style.left = `${event.clientX - button.getBoundingClientRect().left - radius}px`;
        circle.style.top = `${event.clientY - button.getBoundingClientRect().top - radius}px`;
        circle.classList.add('ripple');
        const ripple = button.getElementsByClassName('ripple')[0];
        if (ripple) { ripple.remove(); }
        button.appendChild(circle);
    }
}

// üíæ –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —Å—Ö–æ–≤–∏—â–µ –¥–∞–Ω–∏—Ö (Firebase Firestore)
// –ë—ñ–ª—å—à—ñ—Å—Ç—å –º–µ—Ç–æ–¥—ñ–≤ —Ç–µ–ø–µ—Ä –ê–°–ò–ù–•–†–û–ù–ù–Ü
class DataStorage {
    
    // --- –õ–æ–∫–∞–ª—å–Ω–∞ —Å–µ—Å—ñ—è (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –π–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É –Ω–∞ —á–∞—Å —Ç–µ—Å—Ç—É) ---
    static getCurrentUser() {
        try { return JSON.parse(localStorage.getItem('current_user')); } catch (error) { return null; }
    }

    static setCurrentUser(user) {
        localStorage.setItem('current_user', JSON.stringify(user));
    }

    static clearCurrentUser() { 
        localStorage.removeItem('current_user'); 
        console.log("Session Status: Student user logged out.");
    }
    
    static isAdminAuthenticated() { return localStorage.getItem('admin_authenticated') === 'true'; }

    static setAdminAuthenticated(value) {
        if (value) { 
            localStorage.setItem('admin_authenticated', 'true'); 
        } else { 
            localStorage.removeItem('admin_authenticated'); 
        }
    }
    // -------------------------------------------------------------------------------------------------------

    // --- Firebase Firestore –û–ø–µ—Ä–∞—Ü—ñ—ó (–ê–°–ò–ù–•–†–û–ù–ù–Ü) ---

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Firestore
    static async getUsers() {
        try {
            const snapshot = await db.collection('users').get();
            const users = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            return users;
        } catch (error) {
            console.error("Error retrieving users from Firestore:", error);
            Utils.showErrorNotification('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ö–º–∞—Ä–∏.');
            return [];
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Firestore
    static async getProgress() {
        try {
            const snapshot = await db.collection('progress').get();
            const progress = {};
            snapshot.docs.forEach(doc => {
                progress[doc.id] = doc.data();
            });
            return progress;
        } catch (error) {
            console.error("Error retrieving progress from Firestore:", error);
            Utils.showErrorNotification('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑ —Ö–º–∞—Ä–∏.');
            return {};
        }
    }
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–Ω—è —É Firestore
    static async saveProgress(userId, progressData) {
        try {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ UID —è–∫ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
            await db.collection('progress').doc(userId).set(progressData);
            return true;
        } catch (error) {
            console.error("Error saving progress to Firestore:", error);
            Utils.showErrorNotification('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É —É —Ö–º–∞—Ä—ñ.');
            return false;
        }
    }
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É—á–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó studentNumber)
    static async updateUserData(userId, data) {
        try {
            await db.collection('users').doc(userId).update(data);
            return true;
        } catch (error) {
            console.error("Error updating user data in Firestore:", error);
            Utils.showErrorNotification('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É—á–Ω—è.');
            return false;
        }
    }
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Auth —Ç–∞ Firestore
    static async deleteUser(userId) {
        try {
            // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ Firestore (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—É)
            await db.collection('users').doc(userId).delete();
            await db.collection('progress').doc(userId).delete().catch(() => {}); // –ù–µ —Å—Ç—Ä–∞—à–Ω–æ, —è–∫—â–æ –ø—Ä–æ–≥—Ä–µ—Å—É –Ω–µ–º–∞—î
            
            // !!! –£–í–ê–ì–ê: –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ Firebase Auth –Ω–µ–º–æ–∂–ª–∏–≤–µ –∑ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–≥–æ JS —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏.
            // –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Auth –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å Firebase, 
            // –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Cloud Functions. –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Ü–µ.

            return true;
        } catch (error) {
            console.error("Error deleting user from Firestore:", error);
            Utils.showErrorNotification('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Firestore.');
            return false;
        }
    }
}

// üåê –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä (Router) –¥–ª—è SPA
class OlympiadRouter {
    constructor() {
        this.views = {
            main: Utils.getEl('mainView'),
            studentApp: Utils.getEl('studentAppView'),
            adminApp: Utils.getEl('adminAppView')
        };
        this.currentView = 'main';
    }

    renderView(viewName) {
        if (!this.views[viewName]) {
            console.error(`View ${viewName} not found.`);
            return;
        }
        
        Object.values(this.views).forEach(v => Utils.hide(v));
        Utils.show(this.views[viewName]);
        this.currentView = viewName;
    }
}

// ‚è±Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ª—ñ–º–ø—ñ–∞–¥–∏ (–ª–æ–≥—ñ–∫–∞, –≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–∞ –≤—ñ–¥ UI)
class OlympiadManager {
    constructor(router, progressData) {
        this.router = router;
        this.currentUser = DataStorage.getCurrentUser();
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
        this.progress = progressData || {};
        this.answers = this.progress.answers || {};
        this.totalTimeSpent = this.progress.timeSpent || 0;
        this.fullscreenExitCount = this.progress.fullscreenExits || 0;

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É
        this.currentTask = 1;
        this.totalTasks = CONFIG.TASKS_CONTENT.length - 1;
        this.timeRemaining = CONFIG.TASK_TIME;
        this.timerInterval = null;
        this.isFinished = this.progress.completed || false;
        this.viewMode = false;
        
        this.setupTaskEvents();
    }
    
    // ... (–ú–µ—Ç–æ–¥–∏ startOlympiad, setupTaskEvents, updateTimerDisplay, enterFullscreen, 
    // handleFullscreenChange, handleVisibilityChange, handleFullscreenExit, forceFinish
    // –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –ø—Ä–∞–∫—Ç–∏—á–Ω–æ –±–µ–∑ –∑–º—ñ–Ω, –∞–ª–µ —Ç–µ–ø–µ—Ä –∫–µ—Ä—É—é—Ç—å—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º –ø–æ—Ç–æ–∫–æ–º)

    startOlympiad() {
        if (this.isFinished) {
            this.displayResults();
            return;
        }

        Utils.hide(Utils.getEl('studentIntro'));
        Utils.show(Utils.getEl('studentTasks'));
        
        this.isFinished = false;
        this.currentTask = 1;
        this.timeRemaining = CONFIG.TASK_TIME;
        
        this.showTask(1);
        this.startTimer();
        this.enterFullscreen();
        Utils.showSuccess('–û–ª—ñ–º–ø—ñ–∞–¥—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –£–≤—ñ–π–¥—ñ—Ç—å —É –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º.');
    }
    
    setupTaskEvents() {
        Utils.getEl('prevTaskBtn').addEventListener('click', () => this.previousTask());
        Utils.getEl('nextTaskBtn').addEventListener('click', () => this.nextTask());
        Utils.getEl('finishOlympiadBtn').addEventListener('click', () => this.finishOlympiad());

        document.addEventListener('input', (e) => {
            if (e.target.closest('#taskContentContainer') && !this.viewMode) {
                this.saveCurrentTaskAnswers();
            }
        });
    }

    showTask(taskNumber) {
        // ... (–õ–æ–≥—ñ–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å —Ç–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—é)
        this.currentTask = taskNumber;
        const container = Utils.getEl('taskContentContainer');
        const task = CONFIG.TASKS_CONTENT[taskNumber];
        
        if (!task || !container) return;
        
        container.innerHTML = `
            <h2 class="task-title">${task.title}</h2>
            <p style="color: var(--text-secondary); margin-bottom: 30px;">${task.description}</p>
            ${task.html}
        `;
        
        Utils.getEl('currentTaskNum').textContent = taskNumber;
        
        const prevBtn = Utils.getEl('prevTaskBtn');
        const nextBtn = Utils.getEl('nextTaskBtn');
        const finishBtn = Utils.getEl('finishOlympiadBtn');
        
        prevBtn.disabled = (taskNumber === 1);
        
        if (taskNumber === this.totalTasks) {
            Utils.hide(nextBtn);
            Utils.show(finishBtn);
            if(this.viewMode) {
                finishBtn.textContent = "‚Üê –ù–∞ –≥–æ–ª–æ–≤–Ω—É";
                finishBtn.classList.remove('btn-primary');
                finishBtn.classList.add('btn-secondary');
            } else { 
                finishBtn.textContent = "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–ª—ñ–º–ø—ñ–∞–¥—É";
                finishBtn.classList.remove('btn-secondary');
                finishBtn.classList.add('btn-primary');
            }
        } else {
            Utils.show(nextBtn);
            Utils.hide(finishBtn);
            if (this.viewMode) {
                nextBtn.classList.remove('btn-primary');
                nextBtn.classList.add('btn-secondary');
            } else {
                nextBtn.classList.remove('btn-secondary');
                nextBtn.classList.add('btn-primary');
            }
        }
        
        this.loadTaskAnswers(taskNumber);
    }
    
    nextTask() {
        if (this.currentTask < this.totalTasks) {
            
            if (!this.viewMode) {
                this.saveCurrentTaskAnswers();
                this.totalTimeSpent += (CONFIG.TASK_TIME - this.timeRemaining);
                this.timeRemaining = CONFIG.TASK_TIME; 
                this.startTimer();
                Utils.showSuccess(`–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è ${this.currentTask + 1}`);
            }

            this.currentTask++;
            this.showTask(this.currentTask);
            
        } else if (this.currentTask === this.totalTasks) {
            if (this.viewMode) {
                 DataStorage.clearCurrentUser();
                 Utils.getEl('studentTasks').classList.remove('view-mode');
                 this.router.renderView('main');
            } else {
                this.finishOlympiad();
            }
        }
    }

    previousTask() {
        if (this.currentTask > 1) {
            if (!this.viewMode) {
                this.saveCurrentTaskAnswers();
            }
            this.currentTask--;
            this.showTask(this.currentTask);
            if (!this.viewMode) this.startTimer(); 
        }
    }
    
    saveCurrentTaskAnswers() {
        const answers = {};
        const taskElement = Utils.getEl('taskContentContainer');
        if (!taskElement) return;
        
        taskElement.querySelectorAll('select, input, textarea').forEach(element => {
            answers[element.id] = element.value.trim();
        });
        
        this.answers[`task${this.currentTask}`] = answers;
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —á–∞—Å —Ç–µ—Å—Ç—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø–∞–º—É Firebase
        localStorage.setItem('olympiad_session_answers', JSON.stringify(this.answers)); 
    }

    loadTaskAnswers(taskNumber) {
        // ... (–õ–æ–≥—ñ–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—é)
        const savedAnswers = this.answers[`task${taskNumber}`] || {};
        const taskElement = Utils.getEl('taskContentContainer');
        
        taskElement.querySelectorAll('select, input, textarea').forEach(element => {
            if (savedAnswers[element.id]) element.value = savedAnswers[element.id];
            
            if (this.viewMode) { 
                element.disabled = true; 
                element.classList.add('view-mode-input');
                
                element.classList.remove('correct-answer', 'wrong-answer');
                element.parentNode.classList.remove('correct-answer-block', 'wrong-answer-block', 'manual-check-block');
                const existingHint = element.parentNode.querySelector('.correct-hint');
                if (existingHint) existingHint.remove();

                const taskId = `task${taskNumber}`;
                if (CONFIG.CORRECT_ANSWERS[taskId]) {
                    const isSelect = element.tagName.toLowerCase() === 'select';
                    const isAutochecked = CONFIG.CORRECT_ANSWERS[taskId][element.id];
                    
                    if (isAutochecked) {
                         const userAnswer = (isSelect ? element.value.toUpperCase() : element.value.toLowerCase());
                         const correctAnswer = (isSelect ? isAutochecked.toUpperCase() : isAutochecked.toLowerCase());

                         if (userAnswer === correctAnswer) {
                            element.classList.add('correct-answer');
                            element.parentNode.classList.add('correct-answer-block');
                         } else if (userAnswer !== '') {
                            element.classList.add('wrong-answer');
                            element.parentNode.classList.add('wrong-answer-block');
                            
                            const correctHint = document.createElement('span');
                            correctHint.className = 'correct-hint';
                            correctHint.textContent = `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${correctAnswer}`;
                            element.parentNode.appendChild(correctHint);
                         }
                    } else {
                         element.parentNode.classList.add('manual-check-block');
                    }
                } else if (taskId === 'task3') {
                     element.parentNode.classList.add('manual-check-block');
                }

            } else { 
                element.disabled = false; 
                element.classList.remove('view-mode-input');
            }
        });

        if (!this.viewMode) {
             this.updateTimerDisplay();
        } else {
             Utils.hide(Utils.getEl('timerDisplay'));
             const finishBtn = Utils.getEl('finishOlympiadBtn');
             if (taskNumber === this.totalTasks && finishBtn && this.viewMode) {
                 finishBtn.onclick = () => {
                     DataStorage.clearCurrentUser();
                     Utils.getEl('studentTasks').classList.remove('view-mode');
                     this.router.renderView('main');
                 };
             }
        }
    }
    
    // ... (–ú–µ—Ç–æ–¥–∏ Timer –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º–∏)
    startTimer() {
        if (this.isFinished || this.viewMode) return; 
        
        this.stopTimer();
        this.timerInterval = setInterval(() => {
            if (this.timeRemaining > 0) {
                this.timeRemaining--;
                this.updateTimerDisplay();
            } else {
                Utils.showWarning(`–ß–∞—Å –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è ${this.currentTask} –≤–∏–π—à–æ–≤.`);
                this.nextTask();
            }
        }, 1000);
    }

    stopTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
    }

    // ... (–Ü–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –ø—Ä–æ–∫—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)

    // --- –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è (–¢–µ–ø–µ—Ä –ê–°–ò–ù–•–†–û–ù–ù–ï) ---
    calculateScore() {
        // ... (–õ–æ–≥—ñ–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –±–∞–ª—ñ–≤ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—é)
        let score = 0;
        const answers = this.answers;
        
        // –ó–∞–≤–¥–∞–Ω–Ω—è 1 (12 –±–∞–ª—ñ–≤)
        if (answers.task1) {
            Object.keys(CONFIG.CORRECT_ANSWERS.task1).forEach(key => {
                const userAnswer = answers.task1[key];
                const correctAnswer = CONFIG.CORRECT_ANSWERS.task1[key];
                if (userAnswer && userAnswer.toLowerCase() === correctAnswer.toLowerCase()) { score += 1; }
            });
        }
        
        // –ó–∞–≤–¥–∞–Ω–Ω—è 2 (12 –±–∞–ª—ñ–≤: 6 –≤–∏–±—ñ—Ä + 6 –∫–æ—Ä–æ—Ç–∫–∞)
        if (answers.task2) {
            // –í–∏–±—ñ—Ä
            Object.keys(CONFIG.CORRECT_ANSWERS.task2).forEach(id => {
                const userAnswer = answers.task2[id];
                const correctAnswer = CONFIG.CORRECT_ANSWERS.task2[id];
                if (userAnswer && userAnswer.toUpperCase() === correctAnswer.toUpperCase()) { score += 1; }
            });
            // –ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–∏—à–µ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É)
            const shortAnswers = ['r2q1', 'r2q3', 'r2q5', 'r2q7', 'r2q9', 'r2q11'];
            shortAnswers.forEach(id => {
                if (answers.task2[id] && answers.task2[id].trim().length > 2) { score += 1; }
            });
        }
        
        // –ó–∞–≤–¥–∞–Ω–Ω—è 3 (10 –±–∞–ª—ñ–≤: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–∏—à–µ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É)
        if (answers.task3) {
            for (let i = 1; i <= 10; i++) {
                const key = `t3q${i}`;
                if (answers.task3[key] && answers.task3[key].trim().length > 10) { score += 1; }
            }
        }
        
        return Math.min(score, CONFIG.MAX_SCORE);
    }
    
    async finishOlympiad(forced = false) {
        if (this.isFinished) return;
        this.isFinished = true;
        this.stopTimer();
        this.saveCurrentTaskAnswers();
        
        if (document.fullscreenElement) { document.exitFullscreen().catch(() => {}); }
        
        await this.saveResults(forced); // –ê–°–ò–ù–•–†–û–ù–ù–ï –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø
        this.displayResults();
    }

    async saveResults(forced = false) {
        if (!forced && this.currentTask === this.totalTasks && this.timeRemaining > 0) {
            this.totalTimeSpent += (CONFIG.TASK_TIME - this.timeRemaining);
        }
        
        const score = this.calculateScore();
        const score12 = Utils.calculate12PointScore(score, CONFIG.MAX_SCORE);
        
        const progressData = {
            completed: true,
            timestamp: new Date().toISOString(),
            timeSpent: this.totalTimeSpent,
            fullscreenExits: this.fullscreenExitCount,
            score: score,
            score12: score12,
            answers: this.answers,
            forced: forced
        };
        
        // –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —É Firebase
        const success = await DataStorage.saveProgress(this.currentUser.id, progressData);

        if (success) {
            this.progress = progressData;
            localStorage.removeItem('olympiad_session_answers'); // –û—á–∏—â–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à
            Utils.showSuccess('–í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ö–º–∞—Ä—ñ!');
        } else {
            Utils.showErrorNotification('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ö–º–∞—Ä—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        }
    }
    
    displayResults() {
        // ... (–õ–æ–≥—ñ–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—é)
        Utils.hide(Utils.getEl('studentTasks'));
        Utils.hide(Utils.getEl('studentIntro'));
        Utils.show(Utils.getEl('studentResults'));
        
        const userProgress = this.progress;
        const resultsContent = Utils.getEl('resultsContent');
        
        const forcedMessage = userProgress.forced 
            ? '<div class="forced-message card-content">üî¥ –¢–µ—Å—Ç –±—É–≤ –ø—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª (–ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –≤–∏—Ö–æ–¥—ñ–≤ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω—É).</div>' 
            : '';

        resultsContent.innerHTML = `
            <div class="header-section" style="text-align: center;">
                <h1>–û–ª—ñ–º–ø—ñ–∞–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h1>
                <p class="subtitle">–í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ</p>
            </div>
            ${forcedMessage}
            <div class="stats-grid" style="margin: 40px 0;">
                <div class="stat-card card-content"><div class="stat-number">${userProgress.score}/${CONFIG.MAX_SCORE}</div><div class="stat-label">–°–∏—Ä—ñ –±–∞–ª–∏</div></div>
                <div class="stat-card card-content"><div class="stat-number score-final">${userProgress.score12}/12</div><div class="stat-label">12-–±–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞</div></div>
                <div class="stat-card card-content"><div class="stat-number">${Utils.formatTime(userProgress.timeSpent)}</div><div class="stat-label">–í–∏—Ç—Ä–∞—á–µ–Ω–æ —á–∞—Å—É</div></div>
                <div class="stat-card card-content"><div class="stat-number">${userProgress.fullscreenExits}</div><div class="stat-label">–í–∏—Ö–æ–¥–∏ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω—É</div></div>
            </div>
            <div style="text-align: center; margin: 30px 0;">
                <button id="viewAnswersBtn" class="btn-primary ripple-effect" style="padding: 15px 30px; font-size: 1.1rem;">
                    üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                </button>
            </div>
            <div style="text-align: center; margin-top: 30px;">
                <button id="backToHomeBtn" class="btn-secondary ripple-effect" style="padding: 12px 24px;">
                    ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
                </button>
            </div>
        `;

        Utils.getEl('viewAnswersBtn').addEventListener('click', () => { 
            this.viewMode = true;
            Utils.getEl('studentTasks').classList.add('view-mode');
            Utils.hide(Utils.getEl('studentResults'));
            Utils.show(Utils.getEl('studentTasks'));
            this.showTask(1);
        });
        Utils.getEl('backToHomeBtn').addEventListener('click', () => { 
            DataStorage.clearCurrentUser();
            Utils.getEl('studentTasks').classList.remove('view-mode');
            this.router.renderView('main');
        });
    }
}

// üöÄ –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É
class EnglishOlympiadApp {
    constructor() {
        this.router = new OlympiadRouter();
        this.olympiadManager = null;
        this.currentUser = null;
    }

    async init() {
        // –°–ª—É—Ö–∞—î–º–æ —Å—Ç–∞–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Firebase
        auth.onAuthStateChanged(async (user) => {
            if (user) {
                // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —É Firebase, –æ–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
                await this.checkAuthStatus(user);
            } else {
                // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
                DataStorage.clearCurrentUser();
                DataStorage.setAdminAuthenticated(false);
                this.router.renderView('main');
            }
        });
        
        this.setupEventListeners();
        document.body.classList.add('fade-in');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    async checkAuthStatus(firebaseUser = null) {
        // –Ø–∫—â–æ admin_authenticated –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø—ñ—Å–ª—è –≤—Ö–æ–¥—É –∞–¥–º—ñ–Ω–∞), –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        if (DataStorage.isAdminAuthenticated()) {
            this.router.renderView('adminApp');
            this.initAdminApp();
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —É—á–µ–Ω—å
        const localUser = DataStorage.getCurrentUser();
        
        if (firebaseUser) {
            try {
                // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - —Å—Ç—É–¥–µ–Ω—Ç, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –π–æ–≥–æ –¥–∞–Ω—ñ –∑ Firestore
                const userDoc = await db.collection('users').doc(firebaseUser.uid).get();
                if (userDoc.exists) {
                    const userData = userDoc.data();
                    const user = { id: firebaseUser.uid, ...userData };
                    
                    // –Ø–∫—â–æ –Ω–æ–º–µ—Ä —É—á–Ω—è –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ, –≥–µ–Ω–µ—Ä—É—î–º–æ —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
                    if (!user.studentNumber) {
                        user.studentNumber = Utils.generateStudentNumber();
                        await DataStorage.updateUserData(user.id, { studentNumber: user.studentNumber });
                    }
                    
                    DataStorage.setCurrentUser(user);
                    this.currentUser = user;
                    this.router.renderView('studentApp');
                    this.initStudentApp();
                    return;
                }
            } catch (error) {
                console.error("Error fetching user data on startup:", error);
            }
        } 
        
        // –Ø–∫—â–æ –Ω–µ –∞–¥–º—ñ–Ω —ñ –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç
        this.router.renderView('main');
    }

    setupEventListeners() {
        Utils.getEl('mainView').addEventListener('click', (e) => {
            const button = e.target.closest('button');
            if (button) {
                Utils.createRipple(e);
                if (button.dataset.mode) {
                    this.showLoginForm(button.dataset.mode);
                } else if (button.dataset.action === 'backToMain') {
                    this.showMainMenu();
                }
            }
        });
        
        Utils.getEl('studentLoginForm').addEventListener('submit', (e) => { 
            e.preventDefault(); 
            this.handleStudentLogin(); 
        });
        
        Utils.getEl('adminLoginForm').addEventListener('submit', (e) => { 
            e.preventDefault(); 
            this.handleAdminLogin(); 
        });
        
        document.querySelectorAll('button').forEach(button => {
            button.addEventListener('click', Utils.createRipple);
        });
    }

    showMainMenu() {
        // ... (–õ–æ–≥—ñ–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é)
        Utils.show(Utils.getEl('modeSelector'));
        Utils.hide(Utils.getEl('studentLogin'));
        Utils.hide(Utils.getEl('adminLogin'));
    }

    // --- Authentication Handlers (–¢–µ–ø–µ—Ä –ê–°–ò–ù–•–†–û–ù–ù–Ü) ---
    async handleStudentLogin() {
        const login = Utils.getEl('studentLoginInput').value.trim();
        const password = Utils.getEl('studentPasswordInput').value.trim();

        if (!login || !password) {
            Utils.showError('studentError', '–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å.');
            return;
        }
        
        try {
            Utils.showError('studentError', '–í—Ö—ñ–¥...');
            
            // 1. –õ–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ Firebase Authentication
            const userCredential = await auth.signInWithEmailAndPassword(login, password);
            const firebaseUser = userCredential.user;

            // 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —É—á–Ω—è –∑ Firestore
            const userDoc = await db.collection('users').doc(firebaseUser.uid).get();

            if (userDoc.exists) {
                const userData = userDoc.data();
                const user = { 
                    id: firebaseUser.uid, 
                    ...userData
                };
                
                // 3. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è studentNumber, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
                if (!user.studentNumber) {
                    user.studentNumber = Utils.generateStudentNumber();
                    await DataStorage.updateUserData(user.id, { studentNumber: user.studentNumber });
                }
                
                DataStorage.setCurrentUser(user);
                this.currentUser = user;
                this.router.renderView('studentApp');
                this.initStudentApp();
            } else {
                // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤ Auth, –∞–ª–µ –Ω–µ–º–∞—î —É Firestore
                await auth.signOut();
                Utils.showError('studentError', '–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
            }

        } catch (error) {
            Utils.showError('studentError', '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å.');
            console.error("Student Login Error:", error.message);
        }
    }

    async handleAdminLogin() {
        const login = Utils.getEl('adminLoginInput').value.trim();
        const password = Utils.getEl('adminPasswordInput').value.trim();
        const codeWord = Utils.getEl('adminCodeWord').value.trim();
        
        if (codeWord !== CONFIG.ADMIN_CODE_WORD) {
            Utils.showError('adminError', '–ù–µ–≤—ñ—Ä–Ω–µ –∫–æ–¥–æ–≤–µ —Å–ª–æ–≤–æ.');
            return;
        }

        if (login !== CONFIG.ADMIN_LOGIN || password !== CONFIG.ADMIN_PASSWORD) {
            Utils.showError('adminError', '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω–∞.');
            return;
        }

        try {
            Utils.showError('adminError', '–í—Ö—ñ–¥...');
            // –õ–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ Firebase Authentication
            await auth.signInWithEmailAndPassword(login, password);
            
            // –Ø–∫—â–æ –ª–æ–≥—ñ–Ω —É—Å–ø—ñ—à–Ω–∏–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä –∞–¥–º—ñ–Ω–∞
            DataStorage.setAdminAuthenticated(true);
            this.router.renderView('adminApp');
            this.initAdminApp();
            Utils.showSuccess('–í—Ö—ñ–¥ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å —É—Å–ø—ñ—à–Ω–∏–π!');
            
        } catch (error) {
            Utils.showError('adminError', '–ü–æ–º–∏–ª–∫–∞ Firebase. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ —Ç–∞ –∫–æ–¥–æ–≤–µ —Å–ª–æ–≤–æ.');
            console.error("Admin Login Error:", error.message);
        }
    }

    // --- Student App Initialization ---
    async initStudentApp() {
        const currentUser = DataStorage.getCurrentUser();
        Utils.getEl('studentNameDisplay').textContent = `–û–ª—ñ–º–ø—ñ–∞–¥–∞: ${currentUser.name}`;

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑ Firestore
        const allProgress = await DataStorage.getProgress();
        const progress = allProgress[currentUser.id];
        
        const infoHtml = `
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 30px; text-align: center;">
                <div><span class="icon-text">üè´</span><div style="font-weight: 700;">${currentUser.class} –∫–ª–∞—Å</div></div>
                <div><span class="icon-text">üî¢</span><div class="code-badge">${currentUser.studentNumber || 'N/A'}</div></div>
                <div><span class="icon-text">üìä</span><div style="font-weight: 700; color: ${progress && progress.completed ? 'var(--success)' : 'var(--warning)'};">${progress && progress.completed ? '–ó–ê–í–ï–†–®–ï–ù–û' : '–û–ß–Ü–ö–£–Ñ'}</div></div>
            </div>
        `;
        Utils.getEl('introUserInfo').innerHTML = infoHtml;
        Utils.getEl('introUserName').textContent = currentUser.name.split(' ')[0] || '–£—á–µ–Ω—å';
        
        Utils.getEl('studentLogoutBtn').addEventListener('click', async () => {
            // –í–∏—Ö—ñ–¥ –∑ Firebase Auth
            await auth.signOut();
            DataStorage.clearCurrentUser();
        });
        
        Utils.getEl('startOlympiadBtn').addEventListener('click', () => {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            const sessionAnswers = JSON.parse(localStorage.getItem('olympiad_session_answers')) || {};
            if (Object.keys(sessionAnswers).length > 0) {
                 progress.answers = sessionAnswers; // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –ª–æ–∫–∞–ª—å–Ω–æ—ó —Å–µ—Å—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∏ —î
            }
            
            this.olympiadManager = new OlympiadManager(this.router, progress);
            this.olympiadManager.startOlympiad();
        });

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ç—Ä–æ –∞–±–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        if (progress && progress.completed) {
            this.olympiadManager = new OlympiadManager(this.router, progress); 
            Utils.hide(Utils.getEl('studentIntro'));
            this.olympiadManager.displayResults();
        } else {
            Utils.show(Utils.getEl('studentIntro'));
            Utils.hide(Utils.getEl('studentTasks'));
            Utils.hide(Utils.getEl('studentResults'));
        }
    }
    
    // --- Admin App Initialization & Methods (–¢–µ–ø–µ—Ä –ê–°–ò–ù–•–†–û–ù–ù–Ü) ---
    async initAdminApp() {
        this.updateStats();
        this.updateUsersList();
        this.updateResultsTable();
        
        Utils.getEl('adminLogoutBtn').addEventListener('click', async () => {
            // –í–∏—Ö—ñ–¥ –∑ Firebase Auth
            await auth.signOut();
            DataStorage.setAdminAuthenticated(false);
        });
        
        document.querySelectorAll('.tabs .tab').forEach(tab => {
            tab.addEventListener('click', (e) => { this.switchAdminTab(e.target.dataset.tab); });
        });
        
        Utils.getEl('createUserForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.createUser();
        });
        
        Utils.getEl('userSearch').addEventListener('input', (e) => { this.filterUsers(e.target.value); });
    }
    
    switchAdminTab(tabName) {
        document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.panel').forEach(panel => Utils.hide(panel));
        
        document.querySelector(`.tab[data-tab="${tabName}"]`).classList.add('active');
        Utils.show(Utils.getEl(`${tabName}Panel`));
        
        if (tabName === 'users') this.updateUsersList();
        if (tabName === 'stats') {
            this.updateStats();
            this.updateResultsTable();
        }
    }

    async createUser() {
        const name = Utils.getEl('newUserName').value.trim();
        const studentClass = Utils.getEl('newUserClass').value;
        
        if (!name) {
            Utils.showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ü–Ü–ë —É—á–Ω—è.', 'error');
            return;
        }

        // –õ–æ–≥—ñ–Ω —Ç–µ–ø–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º email –¥–ª—è Firebase Auth
        let users = await DataStorage.getUsers();
        let login = '';
        let index = 1;
        do {
            login = Utils.generateLogin(name, index);
            index++;
        } while (users.find(u => u.login === login));
        
        const password = Utils.generatePassword();
        
        try {
            // 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É Firebase Auth
            const userCredential = await auth.createUserWithEmailAndPassword(login, password);
            const firebaseUser = userCredential.user;
            
            const newUser = { 
                id: firebaseUser.uid, 
                name, 
                class: studentClass, 
                login, 
                password, // –ü–∞—Ä–æ–ª—å –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É Firestore –ª–∏—à–µ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω—Ü—ñ
                studentNumber: null 
            };
            
            // 2. –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É Firestore
            await db.collection('users').doc(newUser.id).set(newUser);
            
            this.showCreatedCredentials(newUser);
            Utils.getEl('createUserForm').reset();
            await this.updateStats();
            await this.updateUsersList();
            Utils.showSuccess('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É —Ö–º–∞—Ä—ñ!');

        } catch (error) {
            Utils.showErrorNotification(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: ${error.message.includes('email-already-in-use') ? '–õ–æ–≥—ñ–Ω –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π.' : error.message}`);
            console.error("User Creation Error:", error);
        }
    }
    
    showCreatedCredentials(user) {
        // ... (–õ–æ–≥—ñ–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö)
        const credentialsBox = Utils.getEl('createdCredentials');
        const credentialsInfo = Utils.getEl('credentialsInfo');
            
        credentialsInfo.innerHTML = `
            <p><strong>–Ü–º'—è:</strong> ${user.name} | <strong>–ö–ª–∞—Å:</strong> ${user.class}</p>
            <div style="display: flex; flex-wrap: wrap; gap: 20px; margin: 15px 0; background: var(--input-bg); padding: 15px; border-radius: 4px; border: 1px solid var(--border-color);">
                <div><strong>–õ–æ–≥—ñ–Ω:</strong> <code class="code-badge">${user.login}</code></div>
                <div><strong>–ü–∞—Ä–æ–ª—å:</strong> <code class="code-badge">${user.password}</code></div>
            </div>
            <p style="color: var(--warning); font-size: 0.9rem;">–¶—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ö–º–∞—Ä—ñ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É –∑ –±—É–¥—å-—è–∫–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é.</p>
        `;
        Utils.show(credentialsBox);
        
        Utils.getEl('copyCredentialsBtn').onclick = () => {
            navigator.clipboard.writeText(`–õ–æ–≥—ñ–Ω (Email): ${user.login}, –ü–∞—Ä–æ–ª—å: ${user.password}`);
            Utils.showSuccess('–î–∞–Ω—ñ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ.');
        };
    }
    
    async updateStats() {
        const users = await DataStorage.getUsers();
        const progress = await DataStorage.getProgress();
        const completedCount = Object.values(progress).filter(p => p.completed).length;

        const stats = {
            totalUsers: users.length,
            activeUsers: users.filter(u => u.studentNumber !== null).length, 
            completedUsers: completedCount,
            class10Users: users.filter(u => u.class == 10).length 
        };
        Object.entries(stats).forEach(([id, value]) => {
            const element = Utils.getEl(id);
            if (element) { element.textContent = value; }
        });
    }
    
    async updateUsersList(filteredUsers = null) {
        const users = filteredUsers || await DataStorage.getUsers();
        const progress = await DataStorage.getProgress();
        const container = Utils.getEl('usersListContainer');
        if (!container) return;
        
        if (users.length === 0) {
             container.innerHTML = `<div class="card-content" style="padding: 30px; text-align: center; color: var(--text-secondary);">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–µ –Ω–µ–º–∞—î. –°—Ç–≤–æ—Ä—ñ—Ç—å —ó—Ö.</div>`;
             return;
        }

        const header = `<div class="user-item header"><div>–Ü–º'—è</div><div>–ö–ª–∞—Å</div><div>–ù–æ–º–µ—Ä</div><div>–õ–æ–≥—ñ–Ω</div><div>–°—Ç–∞—Ç—É—Å</div><div>–î—ñ—ó</div></div>`;
        
        const listItems = users.map(user => {
            const userProgress = progress[user.id];
            
            let status = '–ù–ï–ê–ö–¢–ò–í–ù–ò–ô';
            let statusClass = 'danger';
            
            if (user.studentNumber) {
                 status = '–ê–ö–¢–ò–í–ù–ò–ô';
                 statusClass = 'warning';
            }
            if (userProgress && userProgress.completed) {
                status = '–ó–ê–í–ï–†–®–ï–ù–û';
                statusClass = 'success';
            }

            return `
                <div class="user-item card-content">
                    <div>${user.name}</div>
                    <div>${user.class}</div>
                    <div class="code-badge">${user.studentNumber || 'N/A'}</div>
                    <div><code class="code-badge" title="–õ–æ–≥—ñ–Ω: ${user.login}">${user.login}</code></div>
                    <div class="status-badge ${statusClass}">${status}</div>
                    <div>
                        <button class="btn-icon btn-danger ripple-effect" onclick="window.app.deleteUserWrapper('${user.id}')" title="–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞">
                            <span class="material-icons">delete</span>
                        </button>
                    </div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = header + listItems;
        // –†–æ–±–∏–º–æ –≥–ª–æ–±–∞–ª—å–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—é-–æ–±–≥–æ—Ä—Ç–∫—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        window.app = window.app || {};
        window.app.deleteUserWrapper = this.deleteUserWrapper.bind(this);
    }
    
    async filterUsers(searchTerm) {
        const users = await DataStorage.getUsers();
        const term = searchTerm.toLowerCase();
        const filtered = users.filter(user => 
            user.name.toLowerCase().includes(term) ||
            user.login.toLowerCase().includes(term) ||
            (user.studentNumber && user.studentNumber.toString().includes(term))
        );
        this.updateUsersList(filtered);
    }

    async deleteUserWrapper(userId) {
        if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞? –¶–µ —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–∏—Ç—å –π–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ —Ö–º–∞—Ä–∏.')) return;
        
        const success = await DataStorage.deleteUser(userId);

        if (success) {
            this.updateUsersList();
            this.updateStats();
            this.updateResultsTable();
            Utils.showSuccess('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –π–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Firestore. (–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ Firebase Auth –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –≤—Ä—É—á–Ω—É).');
        } else {
             Utils.showErrorNotification('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.');
        }
    }
    
    async updateResultsTable() {
        const users = await DataStorage.getUsers();
        const progressData = await DataStorage.getProgress();
        const tableBody = Utils.getEl('resultsTableBody');
        
        if (!tableBody) return;
        
        const completedUsers = users
            .map(user => ({ user, progress: progressData[user.id] }))
            .filter(item => item.progress && item.progress.completed)
            .sort((a, b) => b.progress.score - a.progress.score);
            
        if (completedUsers.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="6" style="text-align: center; color: var(--text-secondary); padding: 30px;">–ñ–æ–¥–µ–Ω —É—á–µ–Ω—å —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤ –æ–ª—ñ–º–ø—ñ–∞–¥—É.</td></tr>`;
            return;
        }

        tableBody.innerHTML = completedUsers.map((item, index) => {
            const p = item.progress;
            const rank = index + 1;
            
            let statusHtml = p.forced 
                ? `<span class="status-badge danger">–ü—Ä–∏–º—É—Å–æ–≤–æ</span>` 
                : `<span class="status-badge success">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>`;

            return `
                <tr>
                    <td>${rank}</td>
                    <td>${item.user.name}</td>
                    <td>${item.user.class}</td>
                    <td class="score-badge">${p.score} / ${CONFIG.MAX_SCORE}</td>
                    <td class="score-badge" style="color: var(--accent-primary);">${p.score12} / 12</td>
                    <td>${statusHtml}</td>
                </tr>
            `;
        }).join('');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ Firebase (–≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±'—î–∫—Ç–∏ app, auth, db)
    if (typeof app !== 'undefined' && Utils.getEl('mainView')) {
        window.app = new EnglishOlympiadApp();
        window.app.init();
    } else {
        console.error("Initialization Error: Firebase is not initialized or mainView element is missing. Please check your index.html script block.");
    }
});
