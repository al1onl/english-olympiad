// üéØ –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
const CONFIG = {
    ADMIN_LOGIN: "admin",
    ADMIN_PASSWORD: "admin123", 
    ADMIN_CODE_WORD: "olympiad2024",
    TASK_TIME: 20 * 60, // 20 —Ö–≤–∏–ª–∏–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö
    MAX_FULLSCREEN_EXITS: 7,
    MAX_SCORE: 34,
    CORRECT_ANSWERS: {
        task1: {
            t1s1: 'synthesis', t1s2: 'short-sighted', t1s3: 'sporadic',
            t1s4: 'limitations', t1s5: 'detached', t1s6: 'overly',
            t1s7: 'nuance', t1s8: 'clarify', t1s9: 'ambiguous',
            t1s10: 'spurious', t1s11: 'inequalities', t1s12: 'adaptive'
        },
        task2: {
            r2q2: 'C', r2q4: 'A', r2q6: 'A', r2q8: 'A', r2q10: 'A', r2q12: 'A'
        }
    }
};

// üõ†Ô∏è –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏
class Utils {
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
    static showError(elementId, message) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = message;
            element.style.display = 'block';
            setTimeout(() => {
                element.style.display = 'none';
            }, 5000);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    static showSuccess(message) {
        this.showNotification(message, 'success');
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    static showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">${this.getNotificationIcon(type)}</span>
                <span class="notification-message">${message}</span>
            </div>
        `;
        
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${this.getNotificationColor(type)};
            color: white;
            padding: 16px 20px;
            border-radius: var(--border-radius);
            box-shadow: var(--glass-shadow);
            z-index: 10000;
            transform: translateX(400px);
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            max-width: 400px;
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255,255,255,0.2);
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(400px)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 400);
        }, 5000);
        
        return notification;
    }

    static getNotificationIcon(type) {
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };
        return icons[type] || icons.info;
    }

    static getNotificationColor(type) {
        const colors = {
            success: 'linear-gradient(135deg, var(--success), var(--success-dark))',
            error: 'linear-gradient(135deg, var(--danger), var(--danger-dark))',
            warning: 'linear-gradient(135deg, var(--warning), var(--warning-dark))',
            info: 'linear-gradient(135deg, var(--accent), var(--accent-dark))'
        };
        return colors[type] || colors.info;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ª–æ–≥—ñ–Ω—É
    static generateLogin(name) {
        const base = name.toLowerCase()
            .replace(/\s+/g, '')
            .replace(/[^a-z0-9–∞-—è—ñ—ó—î“ë]/g, '')
            .substring(0, 8);
        
        const users = JSON.parse(localStorage.getItem('olympiad_users')) || [];
        let login = base;
        let counter = 1;
        
        while (users.find(user => user.login === login)) {
            login = base + counter;
            counter++;
            
            if (counter > 100) {
                login = base + Date.now().toString().slice(-3);
                break;
            }
        }
        
        return login;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—é
    static generatePassword() {
        const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
        let password = '';
        for (let i = 0; i < 8; i++) {
            password += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return password;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —É—á–Ω—è
    static generateStudentNumber() {
        const users = JSON.parse(localStorage.getItem('olympiad_users')) || [];
        const usedNumbers = users.map(u => u.studentNumber).filter(n => n);
        let number;
        
        do {
            number = Math.floor(Math.random() * 10000) + 1;
        } while (usedNumbers.includes(number));
        
        return number;
    }

    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
    static formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ 12-–±–∞–ª—å–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏
    static calculate12PointScore(rawScore, maxScore) {
        return Math.round((rawScore / maxScore) * 12);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ email
    static validateEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    }

    // –ï—Ñ–µ–∫—Ç ripple –¥–ª—è –∫–Ω–æ–ø–æ–∫
    static createRipple(event) {
        const button = event.currentTarget;
        const circle = document.createElement('span');
        const diameter = Math.max(button.clientWidth, button.clientHeight);
        const radius = diameter / 2;
        
        circle.style.width = circle.style.height = `${diameter}px`;
        circle.style.left = `${event.clientX - button.offsetLeft - radius}px`;
        circle.style.top = `${event.clientY - button.offsetTop - radius}px`;
        circle.classList.add('ripple');
        
        const ripple = button.getElementsByClassName('ripple')[0];
        if (ripple) {
            ripple.remove();
        }
        
        button.appendChild(circle);
    }
}

// üíæ –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —Å—Ö–æ–≤–∏—â–µ –¥–∞–Ω–∏—Ö
class DataStorage {
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    static getUsers() {
        try {
            const users = JSON.parse(localStorage.getItem('olympiad_users')) || [];
            return users.map(user => ({
                ...user,
                studentNumber: user.studentNumber || null,
                status: user.studentNumber ? 'ACTIVE' : 'INACTIVE'
            }));
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
            return [];
        }
    }

    // –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    static saveUsers(users) {
        try {
            localStorage.setItem('olympiad_users', JSON.stringify(users));
            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
            return false;
        }
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    static getCurrentUser() {
        try {
            const user = JSON.parse(localStorage.getItem('current_user'));
            if (user && !user.studentNumber) {
                user.studentNumber = Utils.generateStudentNumber();
                this.updateUserInDatabase(user);
                localStorage.setItem('current_user', JSON.stringify(user));
            }
            return user;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
            return null;
        }
    }

    // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    static setCurrentUser(user) {
        try {
            if (!user.studentNumber) {
                user.studentNumber = Utils.generateStudentNumber();
                user.status = 'ACTIVE';
                this.updateUserInDatabase(user);
            }
            
            localStorage.setItem('current_user', JSON.stringify(user));
            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
            return false;
        }
    }

    // –û–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    static updateUserInDatabase(updatedUser) {
        const users = this.getUsers();
        const index = users.findIndex(u => u.id === updatedUser.id);
        if (index !== -1) {
            users[index] = updatedUser;
            this.saveUsers(users);
        }
    }

    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    static clearCurrentUser() {
        localStorage.removeItem('current_user');
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å
    static getProgress() {
        try {
            return JSON.parse(localStorage.getItem('olympiad_progress')) || {};
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É:', error);
            return {};
        }
    }

    // –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å
    static saveProgress(progress) {
        try {
            localStorage.setItem('olympiad_progress', JSON.stringify(progress));
            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É:', error);
            return false;
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∞–¥–º—ñ–Ω–∞
    static isAdminAuthenticated() {
        return localStorage.getItem('admin_authenticated') === 'true';
    }

    // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∞–¥–º—ñ–Ω–∞
    static setAdminAuthenticated(value) {
        if (value) {
            localStorage.setItem('admin_authenticated', 'true');
        } else {
            localStorage.removeItem('admin_authenticated');
        }
    }
}

// ‚è±Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ª—ñ–º–ø—ñ–∞–¥–∏
class OlympiadManager {
    constructor() {
        this.currentTask = 1;
        this.totalTasks = 3;
        this.timeRemaining = CONFIG.TASK_TIME;
        this.timerInterval = null;
        this.isFinished = false;
        this.fullscreenExitCount = 0;
        this.startTime = null;
        this.totalTimeSpent = 0;
        this.viewMode = false;
        this.answers = {};
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–ª—ñ–º–ø—ñ–∞–¥–∏
    init() {
        this.setupEventListeners();
        this.startTimer();
        this.showTask(1);
        this.startTime = Date.now();
        Utils.showSuccess('–û–ª—ñ–º–ø—ñ–∞–¥–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞! –ì–∞—Ä–Ω–æ—ó —Ä–æ–±–æ—Ç–∏! üöÄ');
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
    setupEventListeners() {
        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
        document.addEventListener('fullscreenchange', () => {
            if (!document.fullscreenElement && !this.isFinished) {
                this.handleFullscreenExit();
            }
        });

        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('visibilitychange', () => {
            if (document.hidden && !this.isFinished) {
                this.handleVisibilityChange();
            }
        });

        // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –≤–∏—Ö–æ–¥—É –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        window.addEventListener('beforeunload', (e) => {
            if (!this.isFinished) {
                e.preventDefault();
                e.returnValue = '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É? –ü—Ä–æ–≥—Ä–µ—Å –º–æ–∂–µ –±—É—Ç–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ.';
            }
        });
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    handleFullscreenExit() {
        if (this.isFinished) return;
        
        this.fullscreenExitCount++;
        this.pauseTimer();
        
        if (this.fullscreenExitCount >= CONFIG.MAX_FULLSCREEN_EXITS) {
            this.forceFinish();
        } else {
            this.showFullscreenWarning();
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º
            setTimeout(() => {
                this.enterFullscreen();
            }, 2000);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º
    showFullscreenWarning() {
        const warning = document.getElementById('fullscreenWarning');
        if (warning) {
            warning.textContent = `–£–≤–∞–≥–∞! –í–∏ –≤–∏–π—à–ª–∏ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É ${this.fullscreenExitCount} —Ä–∞–∑—ñ–≤. –ü—ñ—Å–ª—è ${CONFIG.MAX_FULLSCREEN_EXITS} –≤–∏—Ö–æ–¥—ñ–≤ —Ç–µ—Å—Ç –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`;
            warning.style.display = 'block';
            
            Utils.showNotification(
                `–í–∏ –≤–∏–π—à–ª–∏ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É ${this.fullscreenExitCount}/${CONFIG.MAX_FULLSCREEN_EXITS} —Ä–∞–∑—ñ–≤`, 
                'warning'
            );
        }
    }

    // –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    forceFinish() {
        this.isFinished = true;
        this.stopTimer();
        
        Utils.showNotification(
            `–¢–µ—Å—Ç –ø—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏ –≤–∏–π—à–ª–∏ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É ${this.fullscreenExitCount} —Ä–∞–∑—ñ–≤.`, 
            'error'
        );
        
        this.finishOlympiad();
    }

    // –ó–º—ñ–Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    handleVisibilityChange() {
        if (!this.isFinished) {
            this.pauseTimer();
            Utils.showNotification('–¢–∞–π–º–µ—Ä –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.', 'warning');
        }
    }

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    startTimer() {
        this.stopTimer();
        this.timerInterval = setInterval(() => {
            if (this.timeRemaining > 0) {
                this.timeRemaining--;
                this.updateTimerDisplay();
            } else {
                this.nextTask();
            }
        }, 1000);
    }

    // –ó—É–ø–∏–Ω–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    stopTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
    }

    // –ü–∞—É–∑–∞ —Ç–∞–π–º–µ—Ä–∞
    pauseTimer() {
        this.stopTimer();
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
    updateTimerDisplay() {
        const timerElement = document.getElementById('timer');
        if (timerElement) {
            timerElement.textContent = Utils.formatTime(this.timeRemaining);
            
            // –ó–º—ñ–Ω–∞ –∫–æ–ª—å–æ—Ä—É –ø—Ä–∏ –º–∞–ª–æ–º—É —á–∞—Å—ñ
            if (this.timeRemaining < 300) {
                timerElement.style.background = 'linear-gradient(135deg, var(--danger), var(--danger-dark))';
                timerElement.classList.add('pulse');
            } else if (this.timeRemaining < 600) {
                timerElement.style.background = 'linear-gradient(135deg, var(--warning), var(--warning-dark))';
            }
        }
    }

    // –ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    nextTask() {
        this.saveCurrentTaskAnswers();
        
        if (this.currentTask < this.totalTasks) {
            this.totalTimeSpent += (CONFIG.TASK_TIME - this.timeRemaining);
            this.currentTask++;
            this.timeRemaining = CONFIG.TASK_TIME;
            this.showTask(this.currentTask);
            this.startTimer();
            
            Utils.showSuccess(`–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è ${this.currentTask}`);
        } else {
            this.totalTimeSpent += (CONFIG.TASK_TIME - this.timeRemaining);
            this.finishOlympiad();
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
    showTask(taskNumber) {
        if (this.isFinished && !this.viewMode) return;
        
        // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
        document.querySelectorAll('.task-container').forEach(task => {
            task.style.display = 'none';
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        const currentTaskElement = document.getElementById(`task${taskNumber}`);
        if (currentTaskElement) {
            currentTaskElement.style.display = 'block';
            currentTaskElement.classList.add('active');
        }
        
        // –û–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
        this.updateNavigation(taskNumber);
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        this.loadTaskAnswers(taskNumber);
    }

    // –û–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
    updateNavigation(taskNumber) {
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn1 = document.getElementById('nextBtn1');
        const nextBtn2 = document.getElementById('nextBtn2');
        const finishBtn = document.getElementById('finishBtn');
        
        if (prevBtn) {
            prevBtn.style.display = taskNumber > 1 ? 'block' : 'none';
            prevBtn.onclick = () => this.previousTask();
        }

        // –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        if (nextBtn1) {
            nextBtn1.textContent = taskNumber === 1 ? '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è 2 ‚Üí' : '–î–∞–ª—ñ ‚Üí';
        }
        if (nextBtn2) {
            nextBtn2.textContent = taskNumber === 2 ? '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è 3 ‚Üí' : '–î–∞–ª—ñ ‚Üí';
        }
        if (finishBtn) {
            finishBtn.textContent = this.viewMode ? '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥' : '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–ª—ñ–º–ø—ñ–∞–¥—É';
        }
    }

    // –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è
    previousTask() {
        if (this.currentTask > 1) {
            this.saveCurrentTaskAnswers();
            this.currentTask--;
            this.showTask(this.currentTask);
        }
    }

    // –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
    saveCurrentTaskAnswers() {
        this.answers[`task${this.currentTask}`] = this.getTaskAnswers(this.currentTask);
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
    loadTaskAnswers(taskNumber) {
        const savedAnswers = this.answers[`task${taskNumber}`] || {};
        
        for (let i = 1; i <= 12; i++) {
            const select = document.getElementById(`t1s${i}`);
            const input = document.getElementById(`r2q${i}`) || document.getElementById(`t3q${i}`);
            
            if (select && savedAnswers[`q${i}`]) {
                select.value = savedAnswers[`q${i}`];
            }
            if (input && savedAnswers[`q${i}`]) {
                input.value = savedAnswers[`q${i}`];
            }
        }
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
    getTaskAnswers(taskNumber) {
        const answers = {};
        
        switch (taskNumber) {
            case 1:
                for (let i = 1; i <= 12; i++) {
                    const select = document.getElementById(`t1s${i}`);
                    if (select) answers[`q${i}`] = select.value;
                }
                break;
                
            case 2:
                for (let i = 1; i <= 12; i++) {
                    const element = document.getElementById(`r2q${i}`);
                    if (element) answers[`q${i}`] = element.value;
                }
                break;
                
            case 3:
                for (let i = 1; i <= 10; i++) {
                    const input = document.getElementById(`t3q${i}`);
                    if (input) answers[`q${i}`] = input.value;
                }
                break;
        }
        
        return answers;
    }

    // –£–≤—ñ–π—Ç–∏ –≤ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º
    enterFullscreen() {
        if (document.documentElement.requestFullscreen && !document.fullscreenElement) {
            document.documentElement.requestFullscreen().catch(error => {
                console.log('–ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è:', error);
            });
        }
    }

    // –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–ª—ñ–º–ø—ñ–∞–¥—É
    finishOlympiad() {
        if (this.isFinished) return;
        
        this.isFinished = true;
        this.stopTimer();
        this.saveCurrentTaskAnswers();
        
        // –í–∏–π—Ç–∏ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
        if (document.fullscreenElement) {
            document.exitFullscreen().catch(console.log);
        }
        
        // –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        this.saveResults();
        
        // –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        this.showResults();
        
        Utils.showSuccess('–û–ª—ñ–º–ø—ñ–∞–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. üéâ');
    }

    // –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    saveResults() {
        const currentUser = DataStorage.getCurrentUser();
        if (!currentUser) return;

        const progress = DataStorage.getProgress();
        const score = this.calculateScore();
        const score12 = Utils.calculate12PointScore(score, CONFIG.MAX_SCORE);
        
        progress[currentUser.id] = {
            completed: true,
            timestamp: new Date().toISOString(),
            timeSpent: this.totalTimeSpent,
            fullscreenExits: this.fullscreenExitCount,
            score: score,
            score12: score12,
            answers: this.answers,
            tasks: {
                task1: this.getTaskAnswers(1),
                task2: this.getTaskAnswers(2),
                task3: this.getTaskAnswers(3)
            }
        };
        
        DataStorage.saveProgress(progress);
    }

    // –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏
    calculateScore() {
        let score = 0;
        
        // –ó–∞–≤–¥–∞–Ω–Ω—è 1: 12 –ø–∏—Ç–∞–Ω—å
        for (let i = 1; i <= 12; i++) {
            const select = document.getElementById(`t1s${i}`);
            if (select && select.value === CONFIG.CORRECT_ANSWERS.task1[`t1s${i}`]) {
                score += 1;
            }
        }
        
        // –ó–∞–≤–¥–∞–Ω–Ω—è 2: 12 –ø–∏—Ç–∞–Ω—å
        Object.keys(CONFIG.CORRECT_ANSWERS.task2).forEach(id => {
            const element = document.getElementById(id);
            if (element && element.value === CONFIG.CORRECT_ANSWERS.task2[id]) {
                score += 1;
            }
        });
        
        // –ö–æ—Ä–æ—Ç–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–≤–¥–∞–Ω–Ω—è 2 (6 –ø–∏—Ç–∞–Ω—å)
        const shortAnswers = ['r2q1', 'r2q3', 'r2q5', 'r2q7', 'r2q9', 'r2q11'];
        shortAnswers.forEach(id => {
            const input = document.getElementById(id);
            if (input && input.value.trim().length > 5) {
                score += 1;
            }
        });
        
        // –ó–∞–≤–¥–∞–Ω–Ω—è 3: 10 –ø–∏—Ç–∞–Ω—å
        for (let i = 1; i <= 10; i++) {
            const input = document.getElementById(`t3q${i}`);
            if (input && input.value.trim().length > 10) {
                score += 1;
            }
        }
        
        return Math.min(score, CONFIG.MAX_SCORE);
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    showResults() {
        const resultsScreen = document.getElementById('resultsScreen');
        const tasksContainer = document.getElementById('tasks');
        
        if (resultsScreen && tasksContainer) {
            tasksContainer.style.display = 'none';
            resultsScreen.style.display = 'block';
            this.displayResults();
        }
    }

    // –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    displayResults() {
        const resultsContent = document.getElementById('resultsContent');
        const currentUser = DataStorage.getCurrentUser();
        const progress = DataStorage.getProgress();
        const userProgress = progress[currentUser.id];
        
        if (!resultsContent || !userProgress) return;
        
        resultsContent.innerHTML = `
            <div class="header-section">
                <div class="logo">üéâ</div>
                <h1>–û–ª—ñ–º–ø—ñ–∞–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h1>
                <p class="subtitle">–í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ</p>
            </div>

            <div class="stats-grid" style="margin: 40px 0;">
                <div class="stat-card glass-card">
                    <div class="stat-number">${userProgress.score}/${CONFIG.MAX_SCORE}</div>
                    <div class="stat-label">–°–∏—Ä—ñ –±–∞–ª–∏</div>
                </div>
                <div class="stat-card glass-card">
                    <div class="stat-number">${userProgress.score12}/12</div>
                    <div class="stat-label">12-–±–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞</div>
                </div>
                <div class="stat-card glass-card">
                    <div class="stat-number">${Utils.formatTime(userProgress.timeSpent)}</div>
                    <div class="stat-label">–í–∏—Ç—Ä–∞—á–µ–Ω–æ —á–∞—Å—É</div>
                </div>
                <div class="stat-card glass-card">
                    <div class="stat-number">${userProgress.fullscreenExits}</div>
                    <div class="stat-label">–í–∏—Ö–æ–¥–∏ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω—É</div>
                </div>
            </div>

            <div class="glass-card" style="padding: 30px; margin-bottom: 25px;">
                <h3 style="color: var(--accent); margin-bottom: 20px; text-align: center;">üìä –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
                    <div><strong>üë§ –£—á–µ–Ω—å:</strong> ${currentUser.name}</div>
                    <div><strong>üè´ –ö–ª–∞—Å:</strong> ${currentUser.class}</div>
                    <div><strong>üî¢ –ù–æ–º–µ—Ä —É—á–Ω—è:</strong> ${currentUser.studentNumber}</div>
                    <div><strong>üìÖ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:</strong> ${new Date(userProgress.timestamp).toLocaleString('uk-UA')}</div>
                </div>
            </div>

            <div style="text-align: center; margin: 30px 0;">
                <button id="viewAnswersBtn" class="btn-primary" style="padding: 15px 30px; font-size: 1.1rem;">
                    üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                </button>
            </div>

            <div class="glass-card" style="padding: 30px; margin-top: 20px;">
                <h3 style="color: var(--accent); margin-bottom: 20px; text-align: center;">üìû –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 20px;">
                    <div style="text-align: center;">
                        <div style="font-size: 1.1rem; font-weight: 600; margin-bottom: 10px;">Telegram</div>
                        <code style="background: rgba(255, 255, 255, 0.1); padding: 10px 15px; border-radius: 8px; font-size: 1rem; display: inline-block;">@nacodexx</code>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 1.1rem; font-weight: 600; margin-bottom: 10px;">Discord</div>
                        <code style="background: rgba(255, 255, 255, 0.1); padding: 10px 15px; border-radius: 8px; font-size: 1rem; display: inline-block;">in.kyiv</code>
                    </div>
                </div>
                <p style="text-align: center; color: var(--text-secondary); font-size: 0.95rem;">
                    –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∞–±–æ –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —É—á–Ω—è (<strong>${currentUser.studentNumber}</strong>) —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.
                </p>
            </div>

            <div style="text-align: center; margin-top: 30px;">
                <button id="backToHomeBtn" class="btn-secondary" style="padding: 12px 24px;">
                    ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
                </button>
            </div>
        `;

        // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        document.getElementById('viewAnswersBtn').addEventListener('click', () => {
            this.enableViewMode();
        });

        // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
        document.getElementById('backToHomeBtn').addEventListener('click', () => {
            window.location.href = 'index.html';
        });
    }

    // –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É
    enableViewMode() {
        this.viewMode = true;
        
        // –ë–ª–æ–∫—É—î–º–æ –≤—Å—ñ –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
        document.querySelectorAll('input, select').forEach(element => {
            element.disabled = true;
            element.style.opacity = '0.7';
        });
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
        document.getElementById('tasks').style.display = 'block';
        document.getElementById('resultsScreen').style.display = 'none';
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        this.showTask(1);
        
        // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        this.addBackToResultsButton();
        
        Utils.showSuccess('–†–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ.');
    }

    // –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    addBackToResultsButton() {
        const taskHeader = document.querySelector('.task-header');
        if (taskHeader && !document.getElementById('backToResultsBtn')) {
            const backBtn = document.createElement('button');
            backBtn.id = 'backToResultsBtn';
            backBtn.textContent = '‚Üê –î–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤';
            backBtn.className = 'btn-secondary';
            backBtn.style.marginRight = '15px';
            backBtn.addEventListener('click', () => {
                this.showResults();
            });
            
            taskHeader.querySelector('div').prepend(backBtn);
        }
    }
}

// üöÄ –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É
class EnglishOlympiadApp {
    constructor() {
        this.olympiadManager = null;
        this.init();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
    init() {
        this.checkCurrentPage();
        this.setupGlobalEventListeners();
        console.log('üéØ English Olympiad App initialized');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    checkCurrentPage() {
        const path = window.location.pathname;
        if (path.includes('admin.html')) {
            this.initAdminPage();
        } else if (path.includes('student.html')) {
            this.initStudentPage();
        } else {
            this.initMainPage();
        }
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ñ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π
    setupGlobalEventListeners() {
        document.addEventListener('DOMContentLoaded', () => {
            this.onPageLoaded();
        });
    }

    // –ü–æ–¥—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    onPageLoaded() {
        document.body.classList.add('fade-in');
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    initMainPage() {
        this.setupModeSelection();
        this.setupLoginForms();
        this.addRippleEffects();
    }

    // –î–æ–¥–∞—Ç–∏ –µ—Ñ–µ–∫—Ç–∏ ripple –¥–æ –∫–Ω–æ–ø–æ–∫
    addRippleEffects() {
        document.querySelectorAll('button').forEach(button => {
            button.addEventListener('click', (e) => {
                Utils.createRipple(e);
            });
        });
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É
    setupModeSelection() {
        document.querySelectorAll('.mode-card[data-mode]').forEach(card => {
            card.addEventListener('click', (e) => {
                Utils.createRipple(e);
                const mode = card.getAttribute('data-mode');
                setTimeout(() => this.showLoginForm(mode), 300);
            });
        });
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º –≤—Ö–æ–¥—É
    setupLoginForms() {
        document.getElementById('studentLoginBtn').addEventListener('click', (e) => {
            Utils.createRipple(e);
            this.handleStudentLogin();
        });
        
        document.getElementById('adminLoginBtn').addEventListener('click', (e) => {
            Utils.createRipple(e);
            this.handleAdminLogin();
        });
        
        document.getElementById('backFromStudentBtn').addEventListener('click', (e) => {
            Utils.createRipple(e);
            this.showMainMenu();
        });
        
        document.getElementById('backFromAdminBtn').addEventListener('click', (e) => {
            Utils.createRipple(e);
            this.showMainMenu();
        });

        // Enter –¥–ª—è —Ñ–æ—Ä–º
        document.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                if (document.getElementById('studentLogin').style.display !== 'none') {
                    this.handleStudentLogin();
                } else if (document.getElementById('adminLogin').style.display !== 'none') {
                    this.handleAdminLogin();
                }
            }
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    showMainMenu() {
        document.getElementById('modeSelector').style.display = 'grid';
        document.getElementById('studentLogin').style.display = 'none';
        document.getElementById('adminLogin').style.display = 'none';
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥—É
    showLoginForm(mode) {
        document.getElementById('modeSelector').style.display = 'none';
        
        if (mode === 'student') {
            document.getElementById('studentLogin').style.display = 'block';
            document.getElementById('adminLogin').style.display = 'none';
        } else {
            document.getElementById('adminLogin').style.display = 'block';
            document.getElementById('studentLogin').style.display = 'none';
        }
    }

    // –û–±—Ä–æ–±–∫–∞ –≤—Ö–æ–¥—É —É—á–Ω—è
    handleStudentLogin() {
        const login = document.getElementById('studentLoginInput').value.trim();
        const password = document.getElementById('studentPasswordInput').value.trim();
        
        if (!login || !password) {
            Utils.showError('studentError', '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è');
            return;
        }
        
        const users = DataStorage.getUsers();
        const user = users.find(u => u.login === login && u.password === password);
        
        if (user) {
            DataStorage.setCurrentUser(user);
            Utils.showSuccess(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${user.name}!`);
            
            setTimeout(() => {
                window.location.href = 'student.html';
            }, 1000);
        } else {
            Utils.showError('studentError', '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å');
        }
    }

    // –û–±—Ä–æ–±–∫–∞ –≤—Ö–æ–¥—É –∞–¥–º—ñ–Ω–∞
    handleAdminLogin() {
        const login = document.getElementById('adminLoginInput').value.trim();
        const password = document.getElementById('adminPasswordInput').value.trim();
        const codeWord = document.getElementById('adminCodeWord').value.trim();
        
        if (login === CONFIG.ADMIN_LOGIN && 
            password === CONFIG.ADMIN_PASSWORD && 
            codeWord === CONFIG.ADMIN_CODE_WORD) {
            
            DataStorage.setAdminAuthenticated(true);
            Utils.showSuccess('–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...');
            
            setTimeout(() => {
                window.location.href = 'admin.html';
            }, 1000);
        } else {
            Utils.showError('adminError', '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ.');
        }
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    initAdminPage() {
        if (!DataStorage.isAdminAuthenticated()) {
            window.location.href = 'index.html';
            return;
        }

        this.setupAdminPanel();
        Utils.showSuccess('–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞');
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    setupAdminPanel() {
        this.addRippleEffects();
        
        // –í–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                Utils.createRipple(e);
                const tabName = tab.getAttribute('data-tab');
                this.switchAdminTab(tabName);
            });
        });

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        document.getElementById('createUserBtn').addEventListener('click', (e) => {
            Utils.createRipple(e);
            this.createUser();
        });

        // –ü–æ—à—É–∫
        document.getElementById('userSearch').addEventListener('input', (e) => {
            this.filterUsers(e.target.value);
        });

        // –í–∏—Ö—ñ–¥
        document.getElementById('adminLogoutBtn').addEventListener('click', (e) => {
            Utils.createRipple(e);
            DataStorage.setAdminAuthenticated(false);
            window.location.href = 'index.html';
        });

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ
        this.updateUsersList();
        this.updateStats();
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    switchAdminTab(tabName) {
        document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.panel').forEach(panel => panel.classList.remove('active'));
        
        const activeTab = document.querySelector(`.tab[data-tab="${tabName}"]`);
        const activePanel = document.getElementById(`${tabName}Panel`);
        
        if (activeTab) activeTab.classList.add('active');
        if (activePanel) activePanel.classList.add('active');
        
        if (tabName === 'users') this.updateUsersList();
        if (tabName === 'stats') this.updateStats();
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    createUser() {
        const name = document.getElementById('newUserName').value.trim();
        const studentClass = document.getElementById('newUserClass').value;
        const group = document.getElementById('newUserGroup').value.trim();
        
        if (!name) {
            Utils.showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º\'—è —É—á–Ω—è', 'warning');
            return;
        }
        
        const login = Utils.generateLogin(name);
        const password = Utils.generatePassword();
        
        const newUser = {
            id: Date.now(),
            name: name,
            class: studentClass,
            group: group || '',
            login: login,
            password: password,
            studentNumber: null,
            created: new Date().toLocaleString('uk-UA')
        };
        
        const users = DataStorage.getUsers();
        users.push(newUser);
        
        if (DataStorage.saveUsers(users)) {
            this.showCreatedCredentials(newUser);
            document.getElementById('newUserName').value = '';
            document.getElementById('newUserGroup').value = '';
            this.updateStats();
            Utils.showSuccess('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        } else {
            Utils.showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', 'error');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ
    showCreatedCredentials(user) {
        const credentialsBox = document.getElementById('createdCredentials');
        const credentialsInfo = document.getElementById('credentialsInfo');
        
        if (credentialsBox && credentialsInfo) {
            credentialsInfo.innerHTML = `
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                    <div><strong>–Ü–º'—è:</strong> ${user.name}</div>
                    <div><strong>–ö–ª–∞—Å:</strong> ${user.class}</div>
                    <div><strong>–õ–æ–≥—ñ–Ω:</strong> <code>${user.login}</code></div>
                    <div><strong>–ü–∞—Ä–æ–ª—å:</strong> <code>${user.password}</code></div>
                    <div><strong>–ù–æ–º–µ—Ä —É—á–Ω—è:</strong> <span style="color: var(--danger);">–ù–ï–ê–ö–¢–ò–í–û–í–ê–ù–û</span></div>
                    <div><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: var(--danger);">–û–ß–Ü–ö–£–Ñ –ê–ö–¢–ò–í–ê–¶–Ü–á</span></div>
                </div>
            `;
            
            credentialsBox.style.display = 'block';
            
            const copyBtn = document.getElementById('copyCredentialsBtn');
            if (copyBtn) {
                copyBtn.onclick = () => {
                    const text = `–Ü–º'—è: ${user.name}\n–ö–ª–∞—Å: ${user.class}\n–õ–æ–≥—ñ–Ω: ${user.login}\n–ü–∞—Ä–æ–ª—å: ${user.password}\n\n–ù–æ–º–µ—Ä —É—á–Ω—è –±—É–¥–µ –ø—Ä–∏—Å–≤–æ—î–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤—Ö–æ–¥—ñ.`;
                    navigator.clipboard.writeText(text);
                    Utils.showSuccess('–î–∞–Ω—ñ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É');
                };
            }
        }
    }

    // –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    updateUsersList() {
        const container = document.getElementById('usersListContainer');
        const users = DataStorage.getUsers();
        
        if (!container) return;
        
        if (users.length === 0) {
            container.innerHTML = `
                <div class="glass-card" style="text-align: center; padding: 50px; color: var(--text-secondary);">
                    <div style="font-size: 4rem; margin-bottom: 20px;">üìù</div>
                    <h3 style="margin-bottom: 15px; color: var(--text-primary);">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ</h3>
                    <p>–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≤–∫–ª–∞–¥—Ü—ñ "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = `
            <div class="user-item header">
                <div>–Ü–º'—è</div>
                <div>–ö–ª–∞—Å</div>
                <div>–ù–æ–º–µ—Ä —É—á–Ω—è</div>
                <div>–õ–æ–≥—ñ–Ω</div>
                <div>–ü–∞—Ä–æ–ª—å</div>
                <div>–°—Ç–∞—Ç—É—Å</div>
                <div>–î—ñ—ó</div>
            </div>
            ${users.map(user => `
                <div class="user-item glass-card">
                    <div>${user.name}</div>
                    <div>${user.class} –∫–ª–∞—Å</div>
                    <div>${user.studentNumber ? 
                        `<span class="student-number-badge">${user.studentNumber}</span>` : 
                        '<span class="status-badge inactive">–ù–ï–ê–ö–¢–ò–í–ù–û</span>'
                    }</div>
                    <div><code>${user.login}</code></div>
                    <div><code>${user.password}</code></div>
                    <div>${user.studentNumber ? 
                        '<span class="status-badge active">–ê–ö–¢–ò–í–ù–ò–ô</span>' : 
                        '<span class="status-badge inactive">–ù–ï–ê–ö–¢–ò–í–ù–ò–ô</span>'
                    }</div>
                    <div>
                        <button class="btn-danger" onclick="app.deleteUser(${user.id})">
                            üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                        </button>
                    </div>
                </div>
            `).join('')}
        `;
    }

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    filterUsers(searchTerm) {
        const users = DataStorage.getUsers();
        const filtered = users.filter(user => 
            user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            user.login.toLowerCase().includes(searchTerm.toLowerCase()) ||
            (user.studentNumber && user.studentNumber.toString().includes(searchTerm))
        );
        
        const container = document.getElementById('usersListContainer');
        if (!container) return;
        
        if (filtered.length === 0) {
            container.innerHTML = '<div class="glass-card" style="text-align: center; padding: 30px; color: var(--text-secondary);">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>';
        } else {
            container.innerHTML = `
                <div class="user-item header">
                    <div>–Ü–º'—è</div>
                    <div>–ö–ª–∞—Å</div>
                    <div>–ù–æ–º–µ—Ä —É—á–Ω—è</div>
                    <div>–õ–æ–≥—ñ–Ω</div>
                    <div>–ü–∞—Ä–æ–ª—å</div>
                    <div>–°—Ç–∞—Ç—É—Å</div>
                    <div>–î—ñ—ó</div>
                </div>
                ${filtered.map(user => `
                    <div class="user-item glass-card">
                        <div>${user.name}</div>
                        <div>${user.class} –∫–ª–∞—Å</div>
                        <div>${user.studentNumber ? 
                            `<span class="student-number-badge">${user.studentNumber}</span>` : 
                            '<span class="status-badge inactive">–ù–ï–ê–ö–¢–ò–í–ù–û</span>'
                        }</div>
                        <div><code>${user.login}</code></div>
                        <div><code>${user.password}</code></div>
                        <div>${user.studentNumber ? 
                            '<span class="status-badge active">–ê–ö–¢–ò–í–ù–ò–ô</span>' : 
                            '<span class="status-badge inactive">–ù–ï–ê–ö–¢–ò–í–ù–ò–ô</span>'
                        }</div>
                        <div>
                            <button class="btn-danger" onclick="app.deleteUser(${user.id})">
                                üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                            </button>
                        </div>
                    </div>
                `).join('')}
            `;
        }
    }

    // –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    deleteUser(userId) {
        if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.')) {
            const users = DataStorage.getUsers();
            const updatedUsers = users.filter(user => user.id !== userId);
            
            if (DataStorage.saveUsers(updatedUsers)) {
                this.updateUsersList();
                this.updateStats();
                Utils.showSuccess('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ');
            } else {
                Utils.showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', 'error');
            }
        }
    }

    // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateStats() {
        const users = DataStorage.getUsers();
        const activeUsers = users.filter(u => u.studentNumber !== null);
        
        const stats = {
            totalUsers: users.length,
            activeUsers: activeUsers.length,
            class9Users: users.filter(u => u.class == 9).length,
            class10Users: users.filter(u => u.class == 10).length,
            class11Users: users.filter(u => u.class == 11).length
        };
        
        Object.entries(stats).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = value;
            }
        });
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —É—á–Ω—è
    initStudentPage() {
        const currentUser = DataStorage.getCurrentUser();
        if (!currentUser) {
            window.location.href = 'index.html';
            return;
        }

        this.updateStudentInterface(currentUser);
        this.setupStudentEventListeners();
        Utils.showSuccess(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${currentUser.name}! –ì–æ—Ç–æ–≤—ñ –¥–æ –æ–ª—ñ–º–ø—ñ–∞–¥–∏?`);
    }

    // –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—á–Ω—è
    updateStudentInterface(user) {
        const studentInfo = document.getElementById('studentInfo');
        if (studentInfo) {
            studentInfo.innerHTML = `
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">
                    <div style="text-align: center;">
                        <div style="font-size: 3rem; margin-bottom: 10px;">üë§</div>
                        <div style="font-weight: 700; color: var(--text-primary);">${user.name}</div>
                        <div style="color: var(--text-secondary); font-size: 0.9rem;">–£—á–µ–Ω—å</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 3rem; margin-bottom: 10px;">üè´</div>
                        <div style="font-weight: 700; color: var(--text-primary);">${user.class}</div>
                        <div style="color: var(--text-secondary); font-size: 0.9rem;">–ö–ª–∞—Å</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 3rem; margin-bottom: 10px;">üî¢</div>
                        <div style="font-weight: 700; color: var(--accent);">${user.studentNumber}</div>
                        <div style="color: var(--text-secondary); font-size: 0.9rem;">–ù–æ–º–µ—Ä</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 3rem; margin-bottom: 10px;">üìä</div>
                        <div style="font-weight: 700; color: var(--success);">–ì–æ—Ç–æ–≤–∏–π</div>
                        <div style="color: var(--text-secondary); font-size: 0.9rem;">–°—Ç–∞—Ç—É—Å</div>
                    </div>
                </div>
            `;
        }
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –¥–ª—è —É—á–Ω—è
    setupStudentEventListeners() {
        this.addRippleEffects();
        
        document.getElementById('startBtn').addEventListener('click', (e) => {
            Utils.createRipple(e);
            this.startOlympiad();
        });
        
        document.getElementById('logoutBtn').addEventListener('click', (e) => {
            Utils.createRipple(e);
            if (confirm('–í–∏–π—Ç–∏ –∑ —Å–∏—Å—Ç–µ–º–∏?')) {
                DataStorage.clearCurrentUser();
                window.location.href = 'index.html';
            }
        });

        // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –º—ñ–∂ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
        document.getElementById('nextBtn1').addEventListener('click', (e) => {
            Utils.createRipple(e);
            if (this.olympiadManager) this.olympiadManager.nextTask();
        });
        
        document.getElementById('nextBtn2').addEventListener('click', (e) => {
            Utils.createRipple(e);
            if (this.olympiadManager) this.olympiadManager.nextTask();
        });
        
        document.getElementById('prevBtn2').addEventListener('click', (e) => {
            Utils.createRipple(e);
            if (this.olympiadManager) this.olympiadManager.previousTask();
        });
        
        document.getElementById('prevBtn3').addEventListener('click', (e) => {
            Utils.createRipple(e);
            if (this.olympiadManager) this.olympiadManager.previousTask();
        });
        
        document.getElementById('finishBtn').addEventListener('click', (e) => {
            Utils.createRipple(e);
            if (this.olympiadManager) this.olympiadManager.finishOlympiad();
        });

        // –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        document.getElementById('prevBtn').addEventListener('click', (e) => {
            Utils.createRipple(e);
            if (this.olympiadManager) this.olympiadManager.previousTask();
        });
    }

    // –ü–æ—á–∞—Ç–∏ –æ–ª—ñ–º–ø—ñ–∞–¥—É
    startOlympiad() {
        document.getElementById('intro').style.display = 'none';
        document.getElementById('tasks').style.display = 'block';
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–ª—ñ–º–ø—ñ–∞–¥–∏
        this.olympiadManager = new OlympiadManager();
        this.olympiadManager.init();
        
        // –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
        this.olympiadManager.enterFullscreen();
    }
}

// üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
let app = new EnglishOlympiadApp();
window.app = app;

console.log('üéØ English Olympiad System loaded successfully!');
