// üéØ –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
const CONFIG = {
    // --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ê–¥–º—ñ–Ω–∞ ---
    ADMIN_LOGIN: "admin",
    ADMIN_PASSWORD: "admin123", 
    ADMIN_CODE_WORD: "olympiad2024",

    // --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –û–ª—ñ–º–ø—ñ–∞–¥–∏ ---
    TASK_TIME: 20 * 60, // 20 —Ö–≤–∏–ª–∏–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö –Ω–∞ –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    MAX_FULLSCREEN_EXITS: 7, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏—Ö–æ–¥—ñ–≤ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    MAX_SCORE: 34, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ–∂–ª–∏–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ (12+12+10)

    // --- –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ö–ª—é—á—ñ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏) ---
    // –í—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ –¥–ª—è –Ω–µ—á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    CORRECT_ANSWERS: {
        // –ó–∞–≤–¥–∞–Ω–Ω—è 1: –õ–µ–∫—Å–∏—á–Ω—ñ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó (12 –±–∞–ª—ñ–≤)
        task1: {
            t1s1: 'synthesis', t1s2: 'short-sighted', t1s3: 'sporadic',
            t1s4: 'limitations', t1s5: 'detached', t1s6: 'overly',
            t1s7: 'nuance', t1s8: 'clarify', t1s9: 'ambiguous',
            t1s10: 'spurious', t1s11: 'inequalities', t1s12: 'adaptive'
        },
        // –ó–∞–≤–¥–∞–Ω–Ω—è 2: –ß–∏—Ç–∞–Ω–Ω—è (6 –±–∞–ª—ñ–≤ –∑–∞ –≤–∏–±—ñ—Ä)
        task2: {
            r2q2: 'C', r2q4: 'A', r2q6: 'A', r2q8: 'A', r2q10: 'A', r2q12: 'A'
        }
        // –ó–∞–≤–¥–∞–Ω–Ω—è 3: –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ (10 –±–∞–ª—ñ–≤) - –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.
    },
    
    // --- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≤–¥–∞–Ω—å (—à–∞–±–ª–æ–Ω HTML) ---
    TASKS_CONTENT: [
        null, // –Ü–Ω–¥–µ–∫—Å 0 –ø–æ—Ä–æ–∂–Ω—ñ–π –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–æ–º–µ—Ä—É –∑–∞–≤–¥–∞–Ω–Ω—è 1, 2, 3
        { 
            title: "–ó–∞–≤–¥–∞–Ω–Ω—è 1. Lexical and Grammatical Transformations (12 –±–∞–ª—ñ–≤)",
            description: "–î–æ–ø–æ–≤–Ω—ñ—Ç—å —Ä–µ—á–µ–Ω–Ω—è, –∑–º—ñ–Ω–∏–≤—à–∏ —Å–ª–æ–≤–∞ —É –¥—É–∂–∫–∞—Ö –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ–æ—Ä–º—É.",
            html: `
                <div class="task-content">
                    <div class="question-block"><p class="question-text">1. The article requires a careful ____________ of all the sources. (SYNTHESIZE)</p><input type="text" id="t1s1" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">2. Her constant focus on minor details made her look ____________. (SHORT-SIGHT)</p><input type="text" id="t1s2" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">3. The sightings of the rare bird were ____________ and difficult to confirm. (SPORADICALLY)</p><input type="text" id="t1s3" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">4. Every technological advance brings with it certain ____________. (LIMIT)</p><input type="text" id="t1s4" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">5. He maintained a professional, almost ____________ attitude during the meeting. (DETACH)</p><input type="text" id="t1s5" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">6. We found the speaker to be ____________ concerned with public image. (OVER)</p><input type="text" id="t1s6" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">7. She spoke about the subtle ____________ of the poem. (NUANCED)</p><input type="text" id="t1s7" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">8. Could you please ____________ your position on this matter? (CLARITY)</p><input type="text" id="t1s8" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">9. His language was often ____________, leaving room for misinterpretation. (AMBIGUITY)</p><input type="text" id="t1s9" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">10. They dismissed the findings as ____________ data from a biased source. (SPUR)</p><input type="text" id="t1s10" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">11. The report highlighted growing social and economic ____________. (EQUAL)</p><input type="text" id="t1s11" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">12. An ____________ strategy is essential in a changing market. (ADAPT)</p><input type="text" id="t1s12" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                </div>
            `
        },
        { 
            title: "–ó–∞–≤–¥–∞–Ω–Ω—è 2. –ß–∏—Ç–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É (12 –±–∞–ª—ñ–≤)",
            description: "–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç —ñ –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ 12 –ø–∏—Ç–∞–Ω—å (6 - –≤–∏–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, 6 - –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å).",
            html: `
                <div class="text-for-reading card-content">
                    <h3 style="margin-bottom: 15px; color: var(--accent);">The Curious Case of Collective Intelligence</h3>
                    <p>Collective intelligence, the ability of a group to make decisions or solve problems better than any single member, has long fascinated scientists. The classic example is the "wisdom of crowds," where the average guess of a large group is often startlingly close to the truth, even if individual guesses are wildly inaccurate. This phenomenon relies on three key elements: diversity of opinion, independence of members, and decentralization of knowledge. When these conditions are met, errors tend to cancel each other out.</p>
                    <p>However, collective intelligence is not foolproof. When crowds lack independence‚Äîfor instance, if members influence each other's opinions, leading to herd mentality‚Äîthe wisdom quickly turns into foolishness. Furthermore, groups often fail when the problem is complex or requires deep, specialized knowledge, rather than a simple aggregation of common sense. The challenge is not merely to gather people, but to structure their interaction in a way that maximizes diversity while ensuring constructive synthesis of ideas.</p>
                </div>

                <div class="task-content">
                    <div class="question-block"><p class="question-text">1. What is the classic example of collective intelligence mentioned in the text? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q1" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">3. What is the primary risk if crowds lack independence? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q3" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block"><p class="question-text">5. What does the text suggest is the main challenge of collective intelligence? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q5" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block">
                        <p class="question-text">2. What is the purpose of collective intelligence? (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q2" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">To simplify complex problems for a single member.</option><option value="B">To ensure individual guesses are always accurate.</option><option value="C">To solve problems better than any single member.</option></select>
                    </div>
                    <div class="question-block">
                        <p class="question-text">4. What is one of the key elements that collective intelligence relies on? (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q4" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">Diversity of opinion.</option><option value="B">Centralization of knowledge.</option><option value="C">Unanimity of thought.</option></select>
                    </div>
                    <div class="question-block">
                        <p class="question-text">6. What happens when members influence each other's opinions? (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q6" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">The wisdom of crowds turns into foolishness.</option><option value="B">The collective knowledge is deepened.</option><option value="C">Independence of members is maximized.</option></select>
                    </div>
                    <div class="question-block"><p class="question-text">7. What is required for the "wisdom of crowds" to work? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q7" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block">
                        <p class="question-text">8. The term 'decentralization' in the text refers to: (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q8" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">Spreading knowledge among many members.</option><option value="B">Giving power to a single, central leader.</option><option value="C">The process of making errors cancel out.</option></select>
                    </div>
                    <div class="question-block"><p class="question-text">9. When do groups often fail? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q9" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block">
                        <p class="question-text">10. The word 'foolproof' most closely means: (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q10" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">Infallible.</option><option value="B">Complicated.</option><option value="C">Transparent.</option></select>
                    </div>
                    <div class="question-block"><p class="question-text">11. What is the process that allows errors to cancel out? (–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - 1 –±–∞–ª)</p><input type="text" id="r2q11" class="answer-input" placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"></div>
                    <div class="question-block">
                        <p class="question-text">12. What kind of problem is *not* easily solved by simple crowd aggregation? (–í–∏–±—ñ—Ä - 1 –±–∞–ª)</p>
                        <select id="r2q12" class="answer-select"><option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option><option value="A">One requiring deep, specialized knowledge.</option><option value="B">One requiring a simple common sense aggregation.</option><option value="C">One where opinions are diverse.</option></select>
                    </div>
                </div>
            `
        },
        { 
            title: "–ó–∞–≤–¥–∞–Ω–Ω—è 3. –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ (10 –±–∞–ª—ñ–≤)",
            description: "–ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π—Ç–µ —Ä–µ—á–µ–Ω–Ω—è —Ç–∞–∫, —â–æ–± –≤–æ–Ω–æ –º–∞–ª–æ —Ç–µ —Å–∞–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞–¥–∞–Ω–µ —Å–ª–æ–≤–æ —É –Ω–µ–∑–º—ñ–Ω–Ω—ñ–π —Ñ–æ—Ä–º—ñ (–º–∞–∫—Å–∏–º—É–º 5 —Å–ª—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ –Ω–∞–¥–∞–Ω–µ).",
            html: `
                <div class="task-content">
                    <div class="question-block"><p class="question-text">1. The accident was caused by his failure to stop. (DID)</p><input type="text" id="t3q1" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">2. We won't be able to finish on time. (POSSIBLE)</p><input type="text" id="t3q2" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">3. It's difficult to see how we can proceed. (EASY)</p><input type="text" id="t3q3" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">4. They only started to cooperate after the crisis. (UNTIL)</p><input type="text" id="t3q4" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">5. She finally realized how serious the situation was. (CAME)</p><input type="text" id="t3q5" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">6. He regrets not having said goodbye to her. (WISHES)</p><input type="text" id="t3q6" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">7. They cancelled the match because of the bad weather. (CALLED)</p><input type="text" id="t3q7" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">8. I found the meeting rather boring. (DID)</p><input type="text" id="t3q8" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">9. It's impossible to finish on time without help. (ABLE)</p><input type="text" id="t3q9" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                    <div class="question-block"><p class="question-text">10. The teacher insisted on early submission. (DEMAND)</p><input type="text" id="t3q10" class="answer-input" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–µ —Ä–µ—á–µ–Ω–Ω—è..."></div>
                </div>
            `
        }
    ]
};

// üõ†Ô∏è –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ DOM —Ç–∞ –¥–∞–Ω–∏–º–∏
class Utils {
    static getEl(id) { return document.getElementById(id); }
    static hide(element) { if(element) element.classList.add('hidden'); }
    static show(element) { if(element) element.classList.remove('hidden'); }

    static showError(elementId, message) {
        const element = Utils.getEl(elementId);
        if (element) {
            element.textContent = message;
            Utils.show(element);
            setTimeout(() => { Utils.hide(element); }, 5000);
        }
    }

    static showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        const icons = { success: '‚úÖ', error: '‚ùå', warning: '‚ö†Ô∏è', info: '‚ÑπÔ∏è' };
        const icon = icons[type] || icons.info;
        notification.innerHTML = `<div style="display: flex; align-items: center;"><span style="font-size: 1.2rem; margin-right: 10px;">${icon}</span><span>${message}</span></div>`;
        document.body.appendChild(notification);
        setTimeout(() => { notification.classList.add('show'); }, 50);
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => { if (notification.parentNode) { notification.parentNode.removeChild(notification); } }, 400);
        }, 5000);
    }
    static showSuccess(message) { this.showNotification(message, 'success'); }
    static showWarning(message) { this.showNotification(message, 'warning'); }
    
    static generateLogin(name) {
        // –õ–æ–≥—ñ–Ω: –ø–µ—Ä—à—ñ 10 —Å–∏–º–≤–æ–ª—ñ–≤ –≤—ñ–¥ –æ–±'—î–¥–Ω–∞–Ω–∏—Ö —Å–ª—ñ–≤ —ñ–º–µ–Ω—ñ —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ
        const base = name.toLowerCase().split(' ').filter(n => n).join('');
        const users = DataStorage.getUsers();
        let login = base.substring(0, 10);
        let counter = 1;
        while (users.find(user => user.login === login)) { 
            login = base.substring(0, 10 - counter.toString().length) + counter; 
            counter++; 
        }
        return login;
    }

    static generatePassword() {
        const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
        let password = '';
        for (let i = 0; i < 8; i++) { password += chars.charAt(Math.floor(Math.random() * chars.length)); }
        return password;
    }

    static generateStudentNumber() {
        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ 5-–∑–Ω–∞—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —É—á–Ω—è
        const users = DataStorage.getUsers();
        const usedNumbers = users.map(u => u.studentNumber).filter(n => n);
        let number;
        do { number = Math.floor(Math.random() * 90000) + 10000; } while (usedNumbers.includes(number));
        return number;
    }

    static formatTime(seconds) {
        const totalSeconds = Math.max(0, seconds); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –≤—ñ–¥'—î–º–Ω–∏–º —á–∏—Å–ª–∞–º
        const mins = Math.floor(totalSeconds / 60);
        const secs = totalSeconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    static calculate12PointScore(rawScore, maxScore) {
        // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è —Å–∏—Ä–æ–≥–æ –±–∞–ª—É —É 12-–±–∞–ª—å–Ω—É —Å–∏—Å—Ç–µ–º—É
        const score = Math.round((rawScore / maxScore) * 12);
        return Math.min(Math.max(score, 0), 12);
    }

    static createRipple(event) {
        const button = event.currentTarget;
        const circle = document.createElement('span');
        const diameter = Math.max(button.clientWidth, button.clientHeight);
        const radius = diameter / 2;
        circle.style.width = circle.style.height = `${diameter}px`;
        circle.style.left = `${event.clientX - button.getBoundingClientRect().left - radius}px`;
        circle.style.top = `${event.clientY - button.getBoundingClientRect().top - radius}px`;
        circle.classList.add('ripple');
        const ripple = button.getElementsByClassName('ripple')[0];
        if (ripple) { ripple.remove(); }
        button.appendChild(circle);
    }
}

// üíæ –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —Å—Ö–æ–≤–∏—â–µ –¥–∞–Ω–∏—Ö (LocalStorage)
class DataStorage {
    static getUsers() {
        try {
            const users = JSON.parse(localStorage.getItem('olympiad_users')) || [];
            return users;
        } catch (error) { 
            console.error("Error retrieving users from localStorage:", error);
            return []; 
        }
    }

    static saveUsers(users) {
        try {
            localStorage.setItem('olympiad_users', JSON.stringify(users));
            return true;
        } catch (error) { 
            console.error("Error saving users to localStorage:", error);
            return false; 
        }
    }
    
    // --- –ù–û–í–ê –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–Ü–°–¢–¨ –î–õ–Ø –ï–ö–°–ü–û–†–¢–£/–Ü–ú–ü–û–†–¢–£ (–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ë–ê–ì–£) ---
    static exportUsers() {
        return JSON.stringify(this.getUsers(), null, 2);
    }

    static importUsers(jsonString) {
        try {
            const importedUsers = JSON.parse(jsonString);
            // –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
            if (Array.isArray(importedUsers) && importedUsers.every(u => typeof u.name === 'string' && typeof u.login === 'string')) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ, –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω—é—é—á–∏ —Å—Ç–∞—Ä—ñ
                this.saveUsers(importedUsers); 
                return true;
            }
            return false;
        } catch (error) {
            console.error("Import Error:", error);
            return false;
        }
    }
    // --------------------------------------------------------------------

    static getCurrentUser() {
        try { return JSON.parse(localStorage.getItem('current_user')); } catch (error) { return null; }
    }

    static setCurrentUser(user) {
        // –Ø–∫—â–æ –Ω–æ–º–µ—Ä —É—á–Ω—è —â–µ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ, –≥–µ–Ω–µ—Ä—É—î–º–æ –π–æ–≥–æ —Ç—É—Ç
        if (!user.studentNumber) {
            user.studentNumber = Utils.generateStudentNumber();
            this.updateUserInDatabase(user);
        }
        localStorage.setItem('current_user', JSON.stringify(user));
    }

    static updateUserInDatabase(updatedUser) {
        const users = this.getUsers();
        const index = users.findIndex(u => u.id === updatedUser.id);
        if (index !== -1) {
            users[index] = updatedUser;
            this.saveUsers(users);
        }
    }

    static clearCurrentUser() { 
        localStorage.removeItem('current_user'); 
        console.log("Session Status: Student user logged out."); // Personal touch
    }

    static getProgress() {
        try { return JSON.parse(localStorage.getItem('olympiad_progress')) || {}; } catch (error) { return {}; }
    }

    static saveProgress(progress) {
        try {
            localStorage.setItem('olympiad_progress', JSON.stringify(progress));
            return true;
        } catch (error) { 
            console.error("Error saving progress to localStorage:", error);
            return false; 
        }
    }

    static isAdminAuthenticated() { return localStorage.getItem('admin_authenticated') === 'true'; }

    static setAdminAuthenticated(value) {
        if (value) { 
            localStorage.setItem('admin_authenticated', 'true'); 
            console.log("Session Status: Admin logged in."); // Personal touch
        } else { 
            localStorage.removeItem('admin_authenticated'); 
            console.log("Session Status: Admin logged out."); // Personal touch
        }
    }
}

// üåê –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä (Router) –¥–ª—è SPA
class OlympiadRouter {
    constructor() {
        this.views = {
            main: Utils.getEl('mainView'),
            studentApp: Utils.getEl('studentAppView'),
            adminApp: Utils.getEl('adminAppView')
        };
        this.currentView = 'main';
    }

    renderView(viewName) {
        if (!this.views[viewName]) {
            console.error(`View ${viewName} not found.`);
            return;
        }
        
        // –°—Ö–æ–≤–∞—Ç–∏ –≤—Å—ñ –≤–∏–¥–∏
        Object.values(this.views).forEach(v => Utils.hide(v));
        
        // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∏–¥
        Utils.show(this.views[viewName]);
        this.currentView = viewName;
    }
}

// ‚è±Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ª—ñ–º–ø—ñ–∞–¥–∏ (–ª–æ–≥—ñ–∫–∞, –≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–∞ –≤—ñ–¥ UI)
class OlympiadManager {
    constructor(router) {
        this.router = router;
        this.currentUser = DataStorage.getCurrentUser();
        this.currentTask = 1;
        this.totalTasks = CONFIG.TASKS_CONTENT.length - 1;
        this.timeRemaining = CONFIG.TASK_TIME;
        this.timerInterval = null;
        this.isFinished = false;
        this.viewMode = false; // –†–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        this.fullscreenExitCount = 0;
        this.totalTimeSpent = 0;
        this.answers = {};
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
        const progressData = DataStorage.getProgress()[this.currentUser.id] || {};
        this.progress = progressData;
        if (progressData.answers) {
            this.answers = progressData.answers;
            this.totalTimeSpent = progressData.timeSpent || 0;
            this.fullscreenExitCount = progressData.fullscreenExits || 0;
        }
        
        this.setupTaskEvents();
    }
    
    // --- Setup & Start ---
    startOlympiad() {
        const progress = DataStorage.getProgress()[this.currentUser.id];
        if (progress && progress.completed) {
            this.answers = progress.answers;
            this.displayResults();
            return;
        }

        Utils.hide(Utils.getEl('studentIntro'));
        Utils.show(Utils.getEl('studentTasks'));
        
        this.isFinished = false;
        this.currentTask = 1;
        this.timeRemaining = CONFIG.TASK_TIME;
        this.totalTimeSpent = 0;
        this.fullscreenExitCount = 0;
        
        this.showTask(1);
        this.startTimer();
        this.enterFullscreen();
        Utils.showSuccess('–û–ª—ñ–º–ø—ñ–∞–¥—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –£–≤—ñ–π–¥—ñ—Ç—å —É –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º.');
    }
    
    setupTaskEvents() {
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        Utils.getEl('prevTaskBtn').addEventListener('click', () => this.previousTask());
        Utils.getEl('nextTaskBtn').addEventListener('click', () => this.nextTask());
        Utils.getEl('finishOlympiadBtn').addEventListener('click', () => this.finishOlympiad());

        // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –¥–æ—Ç–∏–∫: –æ–±–ª—ñ–∫ –∑–º—ñ–Ω –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        document.addEventListener('input', (e) => {
            if (e.target.closest('#taskContentContainer') && !this.viewMode) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –∑–º—ñ–Ω—ñ (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∑–±–æ—é)
                this.saveCurrentTaskAnswers();
            }
        });
    }

    // --- Task Navigation & Saving ---
    showTask(taskNumber) {
        this.currentTask = taskNumber;
        const container = Utils.getEl('taskContentContainer');
        const task = CONFIG.TASKS_CONTENT[taskNumber];
        
        if (!task || !container) return;
        
        container.innerHTML = `
            <h2 class="task-title">${task.title}</h2>
            <p style="color: var(--text-secondary); margin-bottom: 30px;">${task.description}</p>
            ${task.html}
        `;
        
        Utils.getEl('currentTaskNum').textContent = taskNumber;
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
        const prevBtn = Utils.getEl('prevTaskBtn');
        const nextBtn = Utils.getEl('nextTaskBtn');
        const finishBtn = Utils.getEl('finishOlympiadBtn');
        
        // 1. –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –≤ –æ–±–æ—Ö —Ä–µ–∂–∏–º–∞—Ö –∑–∞–≤–∂–¥–∏ –∞–∫—Ç–∏–≤–Ω–∞, —è–∫—â–æ —Ü–µ –Ω–µ –ø–µ—Ä—à–µ/–æ—Å—Ç–∞–Ω–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è
        prevBtn.disabled = (taskNumber === 1);
        
        if (taskNumber === this.totalTasks) {
            Utils.hide(nextBtn);
            Utils.show(finishBtn);

            // –†–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É: –∫–Ω–æ–ø–∫–∞ "–ù–∞ –≥–æ–ª–æ–≤–Ω—É"
            if(this.viewMode) {
                finishBtn.textContent = "‚Üê –ù–∞ –≥–æ–ª–æ–≤–Ω—É";
                finishBtn.classList.remove('btn-primary');
                finishBtn.classList.add('btn-secondary');
            } else { // –†–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: –∫–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç–∏"
                finishBtn.textContent = "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–ª—ñ–º–ø—ñ–∞–¥—É";
                finishBtn.classList.remove('btn-secondary');
                finishBtn.classList.add('btn-primary');
            }
        } else {
            Utils.show(nextBtn);
            Utils.hide(finishBtn);
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ —É —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É
            if (this.viewMode) {
                nextBtn.classList.remove('btn-primary');
                nextBtn.classList.add('btn-secondary');
            } else {
                nextBtn.classList.remove('btn-secondary');
                nextBtn.classList.add('btn-primary');
            }
        }
        
        this.loadTaskAnswers(taskNumber);
    }
    
    nextTask() {
        if (this.currentTask < this.totalTasks) {
            
            // --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –†–µ–∂–∏–º—É –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ---
            if (!this.viewMode) {
                this.saveCurrentTaskAnswers();
                this.totalTimeSpent += (CONFIG.TASK_TIME - this.timeRemaining);
                this.timeRemaining = CONFIG.TASK_TIME; // –°–∫–∏–¥–∞—î–º–æ —Ç–∞–π–º–µ—Ä
                this.startTimer();
                Utils.showSuccess(`–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è ${this.currentTask + 1}`);
            }

            // --- –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –≤ –û–±–æ—Ö –†–µ–∂–∏–º–∞—Ö ---
            this.currentTask++;
            this.showTask(this.currentTask);
            
        } else if (this.currentTask === this.totalTasks) {
            if (this.viewMode) {
                 // –£ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É –æ—Å—Ç–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç–∏" –¥—ñ—î —è–∫ "–ù–∞ –≥–æ–ª–æ–≤–Ω—É"
                 DataStorage.clearCurrentUser();
                 Utils.getEl('studentTasks').classList.remove('view-mode');
                 this.router.renderView('main');
            } else {
                this.finishOlympiad();
            }
        }
    }

    previousTask() {
        if (this.currentTask > 1) {
            
            // --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –†–µ–∂–∏–º—É –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ---
            if (!this.viewMode) {
                this.saveCurrentTaskAnswers();
            }
            
            // --- –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –≤ –û–±–æ—Ö –†–µ–∂–∏–º–∞—Ö ---
            this.currentTask--;
            this.showTask(this.currentTask);
            
            if (!this.viewMode) this.startTimer(); 
        }
    }
    
    saveCurrentTaskAnswers() {
        const answers = {};
        const taskElement = Utils.getEl('taskContentContainer');
        if (!taskElement) return;
        
        taskElement.querySelectorAll('select, input, textarea').forEach(element => {
            answers[element.id] = element.value.trim();
        });
        
        this.answers[`task${this.currentTask}`] = answers;
    }

    loadTaskAnswers(taskNumber) {
        const savedAnswers = this.answers[`task${taskNumber}`] || {};
        const taskElement = Utils.getEl('taskContentContainer');
        
        taskElement.querySelectorAll('select, input, textarea').forEach(element => {
            if (savedAnswers[element.id]) element.value = savedAnswers[element.id];
            
            // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É
            if (this.viewMode) { 
                element.disabled = true; 
                element.classList.add('view-mode-input');
                
                // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏ —Ç–∞ —Å—Ç–∏–ª—ñ
                element.classList.remove('correct-answer', 'wrong-answer');
                element.parentNode.classList.remove('correct-answer-block', 'wrong-answer-block', 'manual-check-block');
                const existingHint = element.parentNode.querySelector('.correct-hint');
                if (existingHint) existingHint.remove();

                const taskId = `task${taskNumber}`;
                if (CONFIG.CORRECT_ANSWERS[taskId]) {
                    const isSelect = element.tagName.toLowerCase() === 'select';
                    const isAutochecked = CONFIG.CORRECT_ANSWERS[taskId][element.id];
                    
                    if (isAutochecked) {
                         const userAnswer = (isSelect ? element.value.toUpperCase() : element.value.toLowerCase());
                         const correctAnswer = (isSelect ? isAutochecked.toUpperCase() : isAutochecked.toLowerCase());

                         if (userAnswer === correctAnswer) {
                            element.classList.add('correct-answer');
                            element.parentNode.classList.add('correct-answer-block');
                         } else if (userAnswer !== '') {
                            element.classList.add('wrong-answer');
                            element.parentNode.classList.add('wrong-answer-block');
                            
                            // –î–æ–¥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—ñ–¥ –ø–æ–ª–µ–º
                            const correctHint = document.createElement('span');
                            correctHint.className = 'correct-hint';
                            correctHint.textContent = `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${correctAnswer}`;
                            element.parentNode.appendChild(correctHint);
                         }
                    } else {
                         // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                         element.parentNode.classList.add('manual-check-block');
                    }
                } else if (taskId === 'task3') {
                     // –î–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è 3
                     element.parentNode.classList.add('manual-check-block');
                }

            } else { 
                element.disabled = false; 
                element.classList.remove('view-mode-input');
            }
        });

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º—ñ —Ç–µ—Å—Ç—É
        if (!this.viewMode) {
             this.updateTimerDisplay();
        } else {
             // –°—Ö–æ–≤–∞—Ç–∏ —Ç–∞–π–º–µ—Ä –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É
             Utils.hide(Utils.getEl('timerDisplay'));
             // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–µ–¥—ñ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–æ–ª–æ–≤–Ω—É" (–¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è)
             const finishBtn = Utils.getEl('finishOlympiadBtn');
             if (taskNumber === this.totalTasks && finishBtn && this.viewMode) {
                 finishBtn.onclick = () => {
                     DataStorage.clearCurrentUser();
                     Utils.getEl('studentTasks').classList.remove('view-mode');
                     this.router.renderView('main');
                 };
             }
        }
    }

    // --- Timer & Proctoring ---
    startTimer() {
        if (this.isFinished || this.viewMode) return; 
        
        this.stopTimer();
        this.timerInterval = setInterval(() => {
            if (this.timeRemaining > 0) {
                this.timeRemaining--;
                this.updateTimerDisplay();
            } else {
                Utils.showWarning(`–ß–∞—Å –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è ${this.currentTask} –≤–∏–π—à–æ–≤.`);
                this.nextTask();
            }
        }, 1000);
    }

    stopTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
    }
    
    updateTimerDisplay() {
        const timerElement = Utils.getEl('timerDisplay');
        if (timerElement) {
            timerElement.textContent = Utils.formatTime(this.timeRemaining);
            // –í—ñ–∑—É–∞–ª—å–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
            timerElement.classList.remove('critical', 'warning');
            if (this.timeRemaining < 300) { timerElement.classList.add('critical'); } 
            else if (this.timeRemaining < 600) { timerElement.classList.add('warning'); }
        }
    }
    
    enterFullscreen() {
        // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ –¥–ª—è –ø—Ä–æ–∫—Ç–æ—Ä–∏–Ω–≥—É
        document.addEventListener('fullscreenchange', this.handleFullscreenChange.bind(this));
        document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));
        
        // –ó–∞–ø–∏—Ç –Ω–∞ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º
        if (document.documentElement.requestFullscreen) {
            document.documentElement.requestFullscreen().catch(e => Utils.showWarning('–î–ª—è –ø–æ—á–∞—Ç–∫—É –æ–ª—ñ–º–ø—ñ–∞–¥–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —É–≤—ñ–π—Ç–∏ –≤ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º.'));
        }
    }

    handleFullscreenChange() {
        if (this.isFinished || this.viewMode) return;

        if (!document.fullscreenElement) { 
            this.handleFullscreenExit(); 
        } else {
            // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω—É
            const warning = Utils.getEl('fullscreenWarning');
            warning.textContent = '';
            Utils.hide(warning);
            this.startTimer();
        }
    }

    handleVisibilityChange() {
        if (this.isFinished || this.viewMode) return;
        
        if (document.hidden) {
             this.stopTimer();
             Utils.showWarning('–¢–µ—Å—Ç –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ. –ù–µ –ø–µ—Ä–µ–º–∏–∫–∞–π—Ç–µ –≤–∫–ª–∞–¥–∫–∏/–¥–æ–¥–∞—Ç–∫–∏.');
        } else {
             this.startTimer();
             Utils.showSuccess('–¢–µ—Å—Ç –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ.');
        }
    }

    handleFullscreenExit() {
        this.fullscreenExitCount++;
        this.stopTimer();
        
        const warning = Utils.getEl('fullscreenWarning');
        Utils.show(warning);
        warning.innerHTML = `‚ö†Ô∏è –£–≤–∞–≥–∞! –í–∏ –≤–∏–π—à–ª–∏ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É <span style="font-weight: bold; color: var(--danger);">${this.fullscreenExitCount}</span> —Ä–∞–∑—ñ–≤. –¢–µ—Å—Ç –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.`;
        
        if (this.fullscreenExitCount >= CONFIG.MAX_FULLSCREEN_EXITS) {
            this.forceFinish();
        } else {
            // –°–ø—Ä–æ–±–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —É –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
            setTimeout(() => { 
                if (document.documentElement.requestFullscreen) {
                    document.documentElement.requestFullscreen().catch(() => {});
                }
            }, 2000);
        }
    }
    
    forceFinish() {
        this.isFinished = true;
        this.stopTimer();
        Utils.getEl('fullscreenWarning').innerHTML = 'üî¥ <span style="font-weight: bold;">–¢–ï–°–¢ –ü–†–ò–ú–£–°–û–í–û –ó–ê–í–ï–†–®–ï–ù–û!</span> –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –≤–∏—Ö–æ–¥—ñ–≤.';
        this.finishOlympiad(true);
    }

    // --- Results & Scoring ---
    calculateScore() {
        let score = 0;
        const answers = this.answers;
        
        // –ó–∞–≤–¥–∞–Ω–Ω—è 1 (12 –±–∞–ª—ñ–≤ - —Ç–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å)
        if (answers.task1) {
            Object.keys(CONFIG.CORRECT_ANSWERS.task1).forEach(key => {
                const userAnswer = answers.task1[key];
                const correctAnswer = CONFIG.CORRECT_ANSWERS.task1[key];
                if (userAnswer && userAnswer.toLowerCase() === correctAnswer.toLowerCase()) { score += 1; }
            });
        }
        
        // –ó–∞–≤–¥–∞–Ω–Ω—è 2 (6 –±–∞–ª—ñ–≤ –∑–∞ –≤–∏–±—ñ—Ä - —Ç–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å)
        if (answers.task2) {
            Object.keys(CONFIG.CORRECT_ANSWERS.task2).forEach(id => {
                const userAnswer = answers.task2[id];
                const correctAnswer = CONFIG.CORRECT_ANSWERS.task2[id];
                if (userAnswer && userAnswer.toUpperCase() === correctAnswer.toUpperCase()) { score += 1; }
            });
            // –ó–∞–≤–¥–∞–Ω–Ω—è 2 (6 –±–∞–ª—ñ–≤ –∑–∞ –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–∏—à–µ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É)
            const shortAnswers = ['r2q1', 'r2q3', 'r2q5', 'r2q7', 'r2q9', 'r2q11'];
            shortAnswers.forEach(id => {
                if (answers.task2[id] && answers.task2[id].trim().length > 2) { score += 1; }
            });
        }
        
        // –ó–∞–≤–¥–∞–Ω–Ω—è 3 (10 –±–∞–ª—ñ–≤ - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–∏—à–µ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É)
        if (answers.task3) {
            for (let i = 1; i <= 10; i++) {
                const key = `t3q${i}`;
                if (answers.task3[key] && answers.task3[key].trim().length > 10) { score += 1; }
            }
        }
        
        return Math.min(score, CONFIG.MAX_SCORE);
    }
    
    finishOlympiad(forced = false) {
        if (this.isFinished) return;
        this.isFinished = true;
        this.stopTimer();
        this.saveCurrentTaskAnswers();
        
        // –í–∏—Ö—ñ–¥ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ
        if (document.fullscreenElement) { document.exitFullscreen().catch(() => {}); }
        
        this.saveResults(forced);
        this.displayResults();
    }

    saveResults(forced = false) {
        // –Ø–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è —ñ —á–∞—Å —â–µ –∑–∞–ª–∏—à–∏–≤—Å—è, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
        if (!forced && this.currentTask === this.totalTasks && this.timeRemaining > 0) {
            this.totalTimeSpent += (CONFIG.TASK_TIME - this.timeRemaining);
        }
        
        const progress = DataStorage.getProgress();
        const score = this.calculateScore();
        const score12 = Utils.calculate12PointScore(score, CONFIG.MAX_SCORE);
        
        progress[this.currentUser.id] = {
            completed: true,
            timestamp: new Date().toISOString(),
            timeSpent: this.totalTimeSpent,
            fullscreenExits: this.fullscreenExitCount,
            score: score,
            score12: score12,
            answers: this.answers,
            forced: forced
        };
        DataStorage.saveProgress(progress);
        this.progress = progress[this.currentUser.id];
    }
    
    displayResults() {
        Utils.hide(Utils.getEl('studentTasks'));
        Utils.hide(Utils.getEl('studentIntro'));
        Utils.show(Utils.getEl('studentResults'));
        
        const userProgress = this.progress;
        const resultsContent = Utils.getEl('resultsContent');
        
        const forcedMessage = userProgress.forced 
            ? '<div class="forced-message card-content">üî¥ –¢–µ—Å—Ç –±—É–≤ –ø—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª (–ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –≤–∏—Ö–æ–¥—ñ–≤ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω—É).</div>' 
            : '';

        resultsContent.innerHTML = `
            <div class="header-section" style="text-align: center;">
                <h1>–û–ª—ñ–º–ø—ñ–∞–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h1>
                <p class="subtitle">–í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ</p>
            </div>
            ${forcedMessage}
            <div class="stats-grid" style="margin: 40px 0;">
                <div class="stat-card card-content"><div class="stat-number">${userProgress.score}/${CONFIG.MAX_SCORE}</div><div class="stat-label">–°–∏—Ä—ñ –±–∞–ª–∏</div></div>
                <div class="stat-card card-content"><div class="stat-number score-final">${userProgress.score12}/12</div><div class="stat-label">12-–±–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞</div></div>
                <div class="stat-card card-content"><div class="stat-number">${Utils.formatTime(userProgress.timeSpent)}</div><div class="stat-label">–í–∏—Ç—Ä–∞—á–µ–Ω–æ —á–∞—Å—É</div></div>
                <div class="stat-card card-content"><div class="stat-number">${userProgress.fullscreenExits}</div><div class="stat-label">–í–∏—Ö–æ–¥–∏ –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω—É</div></div>
            </div>
            <div style="text-align: center; margin: 30px 0;">
                <button id="viewAnswersBtn" class="btn-primary ripple-effect" style="padding: 15px 30px; font-size: 1.1rem;">
                    üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                </button>
            </div>
            <div style="text-align: center; margin-top: 30px;">
                <button id="backToHomeBtn" class="btn-secondary ripple-effect" style="padding: 12px 24px;">
                    ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
                </button>
            </div>
        `;

        Utils.getEl('viewAnswersBtn').addEventListener('click', () => { 
            this.viewMode = true;
            Utils.getEl('studentTasks').classList.add('view-mode'); // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è —Å—Ç–∏–ª—ñ–≤ –ø–µ—Ä–µ–≥–ª—è–¥—É
            Utils.hide(Utils.getEl('studentResults'));
            Utils.show(Utils.getEl('studentTasks'));
            this.showTask(1);
        });
        Utils.getEl('backToHomeBtn').addEventListener('click', () => { 
            DataStorage.clearCurrentUser();
            Utils.getEl('studentTasks').classList.remove('view-mode');
            this.router.renderView('main');
        });
    }
}

// üöÄ –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É
class EnglishOlympiadApp {
    constructor() {
        this.router = new OlympiadRouter();
        this.olympiadManager = null;
    }

    init() {
        // --- –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è "–ê–¥–º—ñ–Ω-–ø–∞—Å—Ç–∫–∏": –°–∫–∏–¥–∞—î–º–æ –∞–¥–º—ñ–Ω-—Å—Ç–∞—Ç—É—Å, —è–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–Ω—è ---
        if (!DataStorage.getCurrentUser() && DataStorage.isAdminAuthenticated()) {
             DataStorage.setAdminAuthenticated(false);
             console.log("Status Reset: Admin session cleared to prevent 'stuck' login.");
        }
        
        this.setupEventListeners();
        this.checkAuthStatus();
        document.body.classList.add('fade-in');
        console.log("App Initialized. Current Status: ", DataStorage.isAdminAuthenticated() ? "Admin" : (DataStorage.getCurrentUser() ? "Student" : "Guest")); // Professional touch
    }
    
    checkAuthStatus() {
        if (DataStorage.isAdminAuthenticated()) {
            this.router.renderView('adminApp');
            this.initAdminApp();
        } else if (DataStorage.getCurrentUser()) {
            this.router.renderView('studentApp');
            this.initStudentApp();
        } else {
            this.router.renderView('main');
        }
    }

    setupEventListeners() {
        // --- Main View & Login ---
        Utils.getEl('mainView').addEventListener('click', (e) => {
            const button = e.target.closest('button');
            if (button) {
                Utils.createRipple(e);
                if (button.dataset.mode) {
                    this.showLoginForm(button.dataset.mode);
                } else if (button.dataset.action === 'backToMain') {
                    this.showMainMenu();
                }
            }
        });
        
        Utils.getEl('studentLoginForm').addEventListener('submit', (e) => { 
            e.preventDefault(); 
            this.handleStudentLogin(); 
        });
        
        Utils.getEl('adminLoginForm').addEventListener('submit', (e) => { 
            e.preventDefault(); 
            this.handleAdminLogin(); 
        });
        
        // –î–æ–¥–∞—î–º–æ —Ä—ñ–ø–ª –µ—Ñ–µ–∫—Ç –¥–æ –≤—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫ (–∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–æ –Ω–∞ –≤—Å—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö)
        document.querySelectorAll('button').forEach(button => {
            button.addEventListener('click', Utils.createRipple);
        });
    }
    
    showLoginForm(mode) {
        Utils.hide(Utils.getEl('modeSelector'));
        Utils.hide(Utils.getEl('studentLogin'));
        Utils.hide(Utils.getEl('adminLogin'));
        
        if (mode === 'student') {
            Utils.show(Utils.getEl('studentLogin'));
            Utils.getEl('studentLoginInput').focus();
        } else {
            Utils.show(Utils.getEl('adminLogin'));
            Utils.getEl('adminLoginInput').focus();
        }
    }
    
    showMainMenu() {
        Utils.show(Utils.getEl('modeSelector'));
        Utils.hide(Utils.getEl('studentLogin'));
        Utils.hide(Utils.getEl('adminLogin'));
    }

    // --- Authentication Handlers ---
    handleStudentLogin() {
        const login = Utils.getEl('studentLoginInput').value.trim();
        const password = Utils.getEl('studentPasswordInput').value.trim();
        
        const user = DataStorage.getUsers().find(u => u.login === login && u.password === password);
        
        if (user) {
            DataStorage.setCurrentUser(user);
            this.router.renderView('studentApp');
            this.initStudentApp();
        } else {
            Utils.showError('studentError', '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å.');
        }
    }

    handleAdminLogin() {
        const login = Utils.getEl('adminLoginInput').value.trim();
        const password = Utils.getEl('adminPasswordInput').value.trim();
        const codeWord = Utils.getEl('adminCodeWord').value.trim();
        
        if (login === CONFIG.ADMIN_LOGIN && password === CONFIG.ADMIN_PASSWORD && codeWord === CONFIG.ADMIN_CODE_WORD) {
            DataStorage.setAdminAuthenticated(true);
            this.router.renderView('adminApp');
            this.initAdminApp();
            Utils.showSuccess('–í—Ö—ñ–¥ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å —É—Å–ø—ñ—à–Ω–∏–π!');
        } else {
            Utils.showError('adminError', '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ —Ç–∞ –∫–æ–¥–æ–≤–µ —Å–ª–æ–≤–æ.');
        }
    }

    // --- Student App Initialization ---
    initStudentApp() {
        const currentUser = DataStorage.getCurrentUser();
        Utils.getEl('studentNameDisplay').textContent = `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${currentUser.name}`;

        const progress = DataStorage.getProgress()[currentUser.id];
        
        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —É—á–Ω—è
        const infoHtml = `
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 30px; text-align: center;">
                <div><span class="icon-text">üè´</span><div style="font-weight: 700;">${currentUser.class} –∫–ª–∞—Å</div></div>
                <div><span class="icon-text">üî¢</span><div class="code-badge">${currentUser.studentNumber || 'N/A'}</div></div>
                <div><span class="icon-text">üìä</span><div style="font-weight: 700; color: ${progress && progress.completed ? 'var(--success)' : 'var(--warning)'};">${progress && progress.completed ? '–ó–ê–í–ï–†–®–ï–ù–û' : '–û–ß–Ü–ö–£–Ñ'}</div></div>
            </div>
        `;
        Utils.getEl('introUserInfo').innerHTML = infoHtml;
        Utils.getEl('introUserName').textContent = currentUser.name.split(' ')[0] || '–£—á–µ–Ω—å';
        
        Utils.getEl('studentLogoutBtn').addEventListener('click', () => {
            DataStorage.clearCurrentUser();
            this.router.renderView('main');
        });
        
        Utils.getEl('startOlympiadBtn').addEventListener('click', () => {
            this.olympiadManager = new OlympiadManager(this.router);
            this.olympiadManager.startOlympiad();
        });

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ç—Ä–æ –∞–±–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, —è–∫—â–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        if (progress && progress.completed) {
            this.olympiadManager = new OlympiadManager(this.router); 
            Utils.hide(Utils.getEl('studentIntro'));
            this.olympiadManager.displayResults();
        } else {
            Utils.show(Utils.getEl('studentIntro'));
            Utils.hide(Utils.getEl('studentTasks'));
            Utils.hide(Utils.getEl('studentResults'));
        }
    }
    
    // --- Admin App Initialization & New Import/Export Methods ---
    initAdminApp() {
        this.updateStats();
        this.updateUsersList();
        this.updateResultsTable();
        
        // Dynamically inject Import/Export controls into the Users Panel
        const usersPanel = Utils.getEl('usersPanel');
        if (usersPanel && !Utils.getEl('importExportControls')) {
            const controlsHtml = `
                <div id="importExportControls" style="display: flex; flex-wrap: wrap; gap: 15px; margin-bottom: 25px;">
                    <button id="exportUsersBtn" class="btn-secondary ripple-effect" style="flex-grow: 1; min-width: 150px;">
                        ‚¨áÔ∏è –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                    </button>
                    <label for="importUsersFile" class="btn-secondary ripple-effect" style="flex-grow: 1; text-align: center; cursor: pointer; padding: 16px 20px; min-width: 150px; font-weight: 700; text-transform: uppercase;">
                        ‚¨ÜÔ∏è –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                    </label>
                    <input type="file" id="importUsersFile" accept=".json" style="display: none;">
                </div>
                <p class="export-hint">‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ '–ï–∫—Å–ø–æ—Ä—Ç' —Ç–∞ '–Ü–º–ø–æ—Ä—Ç' –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —É—á–Ω—ñ–≤ –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏.</p>
            `;
            usersPanel.insertAdjacentHTML('afterbegin', controlsHtml);
            
            // Add event listeners for the dynamically created elements
            Utils.getEl('exportUsersBtn').addEventListener('click', (e) => { Utils.createRipple(e); this.exportUsers(); });
            // Add ripple to the custom file input label
            document.querySelector('label[for="importUsersFile"]').addEventListener('click', Utils.createRipple); 

            Utils.getEl('importUsersFile').addEventListener('change', (e) => this.handleImportFile(e));
        }
        
        Utils.getEl('adminLogoutBtn').addEventListener('click', () => {
            DataStorage.setAdminAuthenticated(false);
            this.router.renderView('main');
        });
        
        document.querySelectorAll('.tabs .tab').forEach(tab => {
            tab.addEventListener('click', (e) => { this.switchAdminTab(e.target.dataset.tab); });
        });
        
        Utils.getEl('createUserForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.createUser();
        });
        
        Utils.getEl('userSearch').addEventListener('input', (e) => { this.filterUsers(e.target.value); });
    }
    
    // --- –ù–û–í–Ü –ú–ï–¢–û–î–ò –Ü–ú–ü–û–†–¢–£/–ï–ö–°–ü–û–†–¢–£ ---
    exportUsers() {
        const usersData = DataStorage.exportUsers();
        const blob = new Blob([usersData], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `olympiad_users_${new Date().toISOString().slice(0, 10)}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        Utils.showSuccess('–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ.');
    }
    
    handleImportFile(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            const jsonString = e.target.result;
            if (DataStorage.importUsers(jsonString)) {
                Utils.showSuccess('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ —Ç–∞ –∑–∞–º—ñ–Ω–∏–ª–∏ —Å—Ç–∞—Ä–∏–π —Å–ø–∏—Å–æ–∫. –¢–µ–ø–µ—Ä –≤–æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞ —Ü—å–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó.');
                this.updateStats();
                this.updateUsersList();
                this.updateResultsTable();
                // –°–∫–∏–¥–∞—î–º–æ —ñ–Ω–ø—É—Ç, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–æ–π —Å–∞–º–∏–π —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ
                event.target.value = ''; 
            } else {
                Utils.showNotification('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É.', 'error');
            }
        };
        reader.readAsText(file);
    }
    // ------------------------------------

    switchAdminTab(tabName) {
        document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.panel').forEach(panel => Utils.hide(panel));
        
        document.querySelector(`.tab[data-tab="${tabName}"]`).classList.add('active');
        Utils.show(Utils.getEl(`${tabName}Panel`));
        
        if (tabName === 'users') this.updateUsersList();
        if (tabName === 'stats') {
            this.updateStats();
            this.updateResultsTable();
        }
    }

    createUser() {
        const name = Utils.getEl('newUserName').value.trim();
        const studentClass = Utils.getEl('newUserClass').value;
        
        if (!name) {
            Utils.showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ü–Ü–ë —É—á–Ω—è.', 'error');
            return;
        }

        const login = Utils.generateLogin(name);
        const password = Utils.generatePassword();
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Date.now() —è–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID
        const newUser = { id: Date.now(), name, class: studentClass, login, password, studentNumber: null };
        const users = DataStorage.getUsers();
        users.push(newUser);
        
        if (DataStorage.saveUsers(users)) {
            this.showCreatedCredentials(newUser);
            Utils.getEl('createUserForm').reset();
            this.updateStats();
            this.updateUsersList();
            Utils.showSuccess('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–ª—è —ñ–Ω—à–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤.');
        }
    }
    
    showCreatedCredentials(user) {
        const credentialsBox = Utils.getEl('createdCredentials');
        const credentialsInfo = Utils.getEl('credentialsInfo');
            
        credentialsInfo.innerHTML = `
            <p><strong>–Ü–º'—è:</strong> ${user.name} | <strong>–ö–ª–∞—Å:</strong> ${user.class}</p>
            <div style="display: flex; flex-wrap: wrap; gap: 20px; margin: 15px 0; background: var(--input-bg); padding: 15px; border-radius: 4px; border: 1px solid var(--border-color);">
                <div><strong>–õ–æ–≥—ñ–Ω:</strong> <code class="code-badge">${user.login}</code></div>
                <div><strong>–ü–∞—Ä–æ–ª—å:</strong> <code class="code-badge">${user.password}</code></div>
            </div>
            <p style="color: var(--warning); font-size: 0.9rem;">–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–±–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —É—á–Ω–µ–≤—ñ. –í–æ–Ω–∏ –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è –Ω–∞ –±—É–¥—å-—è–∫–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó!</p>
        `;
        Utils.show(credentialsBox);
        
        Utils.getEl('copyCredentialsBtn').onclick = () => {
            // –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —É –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
            navigator.clipboard.writeText(`–õ–æ–≥—ñ–Ω: ${user.login}, –ü–∞—Ä–æ–ª—å: ${user.password}`);
            Utils.showSuccess('–î–∞–Ω—ñ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ.');
        };
    }
    
    updateStats() {
        const users = DataStorage.getUsers();
        const progress = DataStorage.getProgress();
        const completedCount = Object.values(progress).filter(p => p.completed).length;

        const stats = {
            totalUsers: users.length,
            // –ê–∫—Ç–∏–≤–Ω—ñ - —Ç—ñ, —Ö—Ç–æ –æ—Ç—Ä–∏–º–∞–≤ –Ω–æ–º–µ—Ä —É—á–Ω—è (—Ç–æ–±—Ç–æ –∫–æ–ª–∏ –≤–æ–Ω–∏ –≤–ø–µ—Ä—à–µ —É–≤—ñ–π—à–ª–∏)
            activeUsers: users.filter(u => u.studentNumber !== null).length, 
            completedUsers: completedCount,
            class10Users: users.filter(u => u.class == 10).length // –ü—Ä–∏–∫–ª–∞–¥
        };
        Object.entries(stats).forEach(([id, value]) => {
            const element = Utils.getEl(id);
            if (element) { element.textContent = value; }
        });
    }
    
    updateUsersList(users = DataStorage.getUsers()) {
        const container = Utils.getEl('usersListContainer');
        const progress = DataStorage.getProgress();
        if (!container) return;
        
        if (users.length === 0) {
             container.innerHTML = `<div class="card-content" style="padding: 30px; text-align: center; color: var(--text-secondary);">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–µ –Ω–µ–º–∞—î. –°—Ç–≤–æ—Ä—ñ—Ç—å —ó—Ö –∞–±–æ —ñ–º–ø–æ—Ä—Ç—É–π—Ç–µ —Å–ø–∏—Å–æ–∫.</div>`;
             return;
        }

        const header = `<div class="user-item header"><div>–Ü–º'—è</div><div>–ö–ª–∞—Å</div><div>–ù–æ–º–µ—Ä</div><div>–õ–æ–≥—ñ–Ω</div><div>–°—Ç–∞—Ç—É—Å</div><div>–î—ñ—ó</div></div>`;
        
        const listItems = users.map(user => {
            const userProgress = progress[user.id];
            
            let status = '–ù–ï–ê–ö–¢–ò–í–ù–ò–ô';
            let statusClass = 'danger';
            
            if (user.studentNumber) {
                 status = '–ê–ö–¢–ò–í–ù–ò–ô';
                 statusClass = 'warning';
            }
            if (userProgress && userProgress.completed) {
                status = '–ó–ê–í–ï–†–®–ï–ù–û';
                statusClass = 'success';
            }

            return `
                <div class="user-item card-content">
                    <div>${user.name}</div>
                    <div>${user.class}</div>
                    <div class="code-badge">${user.studentNumber || 'N/A'}</div>
                    <div><code class="code-badge">${user.login}</code></div>
                    <div class="status-badge ${statusClass}">${status}</div>
                    <div>
                        <button class="btn-icon btn-danger ripple-effect" onclick="window.app.deleteUser(${user.id})" title="–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞">
                            <span class="material-icons">delete</span>
                        </button>
                    </div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = header + listItems;
        // –†–æ–±–∏–º–æ –≥–ª–æ–±–∞–ª—å–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è onclick
        window.app = window.app || {};
        window.app.deleteUser = this.deleteUser.bind(this);
    }
    
    filterUsers(searchTerm) {
        const users = DataStorage.getUsers();
        const term = searchTerm.toLowerCase();
        const filtered = users.filter(user => 
            user.name.toLowerCase().includes(term) ||
            user.login.toLowerCase().includes(term) ||
            (user.studentNumber && user.studentNumber.toString().includes(term))
        );
        this.updateUsersList(filtered);
    }

    deleteUser(userId) {
        if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞? –¶–µ —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–∏—Ç—å –π–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.')) return;
        
        const users = DataStorage.getUsers().filter(user => user.id !== userId);
        const progress = DataStorage.getProgress();
        delete progress[userId]; 

        if (DataStorage.saveUsers(users) && DataStorage.saveProgress(progress)) {
            this.updateUsersList();
            this.updateStats();
            this.updateResultsTable();
            Utils.showSuccess('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –π–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.');
        } else {
             Utils.showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.', 'error');
        }
    }
    
    updateResultsTable() {
        const users = DataStorage.getUsers();
        const progress = DataStorage.getProgress();
        const tableBody = Utils.getEl('resultsTableBody');
        
        if (!tableBody) return;
        
        const completedUsers = users
            .map(user => ({ user, progress: progress[user.id] }))
            .filter(item => item.progress && item.progress.completed)
            .sort((a, b) => b.progress.score - a.progress.score); // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –±–∞–ª–∞–º–∏
            
        if (completedUsers.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="6" style="text-align: center; color: var(--text-secondary); padding: 30px;">–ñ–æ–¥–µ–Ω —É—á–µ–Ω—å —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤ –æ–ª—ñ–º–ø—ñ–∞–¥—É.</td></tr>`;
            return;
        }

        tableBody.innerHTML = completedUsers.map((item, index) => {
            const p = item.progress;
            const rank = index + 1;
            
            let statusHtml = p.forced 
                ? `<span class="status-badge danger">–ü—Ä–∏–º—É—Å–æ–≤–æ</span>` 
                : `<span class="status-badge success">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>`;

            return `
                <tr>
                    <td>${rank}</td>
                    <td>${item.user.name}</td>
                    <td>${item.user.class}</td>
                    <td class="score-badge">${p.score} / ${CONFIG.MAX_SCORE}</td>
                    <td class="score-badge" style="color: var(--accent-primary);">${p.score12} / 12</td>
                    <td>${statusHtml}</td>
                </tr>
            `;
        }).join('');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≥–æ–ª–æ–≤–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç 'mainView', —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫
    if (Utils.getEl('mainView')) {
        window.app = new EnglishOlympiadApp();
        window.app.init();
    } else {
        console.error("The 'mainView' element is missing. HTML structure might be incomplete.");
    }
});
